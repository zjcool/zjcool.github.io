<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>回归初心，轻装前行</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://zjcool.github.io/"/>
  <updated>2019-09-25T06:50:58.345Z</updated>
  <id>https://zjcool.github.io/</id>
  
  <author>
    <name>zhangj</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>[线上问题]-记一次线上问题的解决方案</title>
    <link href="https://zjcool.github.io/2019/09/25/%E8%AE%B0%E4%B8%80%E6%AC%A1%E7%BA%BF%E4%B8%8A%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    <id>https://zjcool.github.io/2019/09/25/记一次线上问题解决方案/</id>
    <published>2019-09-25T06:38:37.000Z</published>
    <updated>2019-09-25T06:50:58.345Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Wed Sep 25 2019 14:51:10 GMT+0800 (中国标准时间) --><p><strong>未解决之前存在问题</strong></p><ol><li>老的java服务，源代码已经找不到了</li><li>客户需要的接口返回参数里 加了密，加密方式为AES</li><li>由于该秘钥在其他很多服务中都使用着，不能直接提供给客户使用</li><li>新的服务，还没有经过测试，无法直接上线，就算能获得测试资源，上线的时间也不能满足客户的需求</li></ol><p><strong>最终解决方案</strong><br>增加一个<strong>代理服务</strong>，去调用老的服务，把返回参数解密后返回给客户</p><p>优点：</p><ol><li>客户只需要换一下调用的服务端口即可</li><li>上线非常快（半个小时开发时间）</li><li>无需关心老的接口</li></ol><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Wed Sep 25 2019 14:51:10 GMT+0800 (中国标准时间) --&gt;&lt;p&gt;&lt;strong&gt;未解决之前存在问题&lt;/strong&gt;&lt;/p&gt;&lt;ol&gt;&lt;li&gt;老的java服务，源代码已经找不到了&lt;/li&gt;&lt;li&gt;客户需要的接口返回参
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>[Java]-获取当天剩余秒数</title>
    <link href="https://zjcool.github.io/2019/09/23/java%E2%80%94%E8%8E%B7%E5%8F%96%E5%BD%93%E5%A4%A9%E5%89%A9%E4%BD%99%E7%A7%92%E6%95%B0/"/>
    <id>https://zjcool.github.io/2019/09/23/java—获取当天剩余秒数/</id>
    <published>2019-09-23T15:11:00.000Z</published>
    <updated>2019-09-25T06:49:29.678Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Wed Sep 25 2019 14:51:10 GMT+0800 (中国标准时间) --><h4 id="获取当天剩余秒数"><a href="#获取当天剩余秒数" class="headerlink" title="获取当天剩余秒数"></a>获取当天剩余秒数</h4><p>两种方法<br>1.线程不安全</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public static Integer getLeftTime() &#123;</span><br><span class="line">        Calendar midnight=Calendar.getInstance();</span><br><span class="line">        midnight.setTime(new Date());</span><br><span class="line">        midnight.add(midnight.DAY_OF_MONTH,1);//加一天</span><br><span class="line">        midnight.set(midnight.HOUR_OF_DAY,0);</span><br><span class="line">        midnight.set(midnight.MINUTE,0);</span><br><span class="line">        midnight.set(midnight.SECOND,0);</span><br><span class="line">        midnight.set(midnight.MILLISECOND,0);</span><br><span class="line">        return (int)((midnight.getTime().getTime()-currentDate.getTime())/1000);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>2.线程安全</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">    Date now = new Date();</span><br><span class="line">    LocalDateTime midnight = LocalDateTime.ofInstant(now.toInstant(), ZoneId.systemDefault());</span><br><span class="line">    midnight.plusDays(1)</span><br><span class="line">            .withHour(0)</span><br><span class="line">            .withMinute(0)</span><br><span class="line">            .withSecond(0)</span><br><span class="line">            .withNano(0);</span><br><span class="line">    LocalDateTime current = LocalDateTime.ofInstant(now.toInstant(), ZoneId.systemDefault());</span><br><span class="line">    return (int) ChronoUnit.SECONDS.between(current, midnight);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Wed Sep 25 2019 14:51:10 GMT+0800 (中国标准时间) --&gt;&lt;h4 id=&quot;获取当天剩余秒数&quot;&gt;&lt;a href=&quot;#获取当天剩余秒数&quot; class=&quot;headerlink&quot; title=&quot;获取当天剩余秒数&quot;&gt;&lt;/a&gt;
      
    
    </summary>
    
    
      <category term="Java" scheme="https://zjcool.github.io/categories/Java/"/>
    
    
      <category term="Date" scheme="https://zjcool.github.io/tags/Date/"/>
    
  </entry>
  
  <entry>
    <title>[Java8]-Predicate用法</title>
    <link href="https://zjcool.github.io/2019/09/19/Java8%E2%80%94Predicate%E7%94%A8%E6%B3%95/"/>
    <id>https://zjcool.github.io/2019/09/19/Java8—Predicate用法/</id>
    <published>2019-09-19T14:58:00.000Z</published>
    <updated>2019-09-25T06:49:22.709Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Wed Sep 25 2019 14:51:10 GMT+0800 (中国标准时间) --><blockquote><p>每次失眠都要庆幸，多了一次可以深刻思考的机会！</p></blockquote><p>废话说完,直接上代码：</p><ul><li>筛选以字母c结尾的字符串</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Predicate&lt;String&gt; condition2 = s -&gt; s.endsWith(&quot;c&quot;);</span><br></pre></td></tr></table></figure><ul><li>筛选以字母a开头的字符串</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Predicate&lt;String&gt; condition1 = s -&gt; s.startsWith(&quot;a&quot;);</span><br><span class="line"></span><br><span class="line">boolean res1 = condition1.test(&quot;abc&quot;); //true</span><br><span class="line">//negate 取反的意思</span><br><span class="line">boolean res2 = condition1.negate().test(&quot;abc&quot;) //false</span><br></pre></td></tr></table></figure><ul><li>筛选以字母a开头 且 以字母c结尾的字符串</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Predicate&lt;String&gt; and = condition.and(condition2);</span><br></pre></td></tr></table></figure><ul><li>筛选以字母a开头 或 以字母c结尾的字符串</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Predicate&lt;String&gt; and = condition.or(condition2);</span><br></pre></td></tr></table></figure><ul><li>筛选大于3的数字</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Predicate&lt;Integer&gt; condition2 = a -&gt; a &gt;=3;</span><br></pre></td></tr></table></figure><ul><li>遍历集合删除以a开头的字符串</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; res4 = list.stream().filter(condition1.negate()).collect(Collectors.toList(););</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Wed Sep 25 2019 14:51:10 GMT+0800 (中国标准时间) --&gt;&lt;blockquote&gt;&lt;p&gt;每次失眠都要庆幸，多了一次可以深刻思考的机会！&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;废话说完,直接上代码：&lt;/p&gt;&lt;ul&gt;&lt;
      
    
    </summary>
    
    
      <category term="Java" scheme="https://zjcool.github.io/categories/Java/"/>
    
    
      <category term="Predicate" scheme="https://zjcool.github.io/tags/Predicate/"/>
    
  </entry>
  
  <entry>
    <title>[Lamada]-遍历过滤</title>
    <link href="https://zjcool.github.io/2019/09/19/Lamada%E2%80%94%E9%81%8D%E5%8E%86%E8%BF%87%E6%BB%A4/"/>
    <id>https://zjcool.github.io/2019/09/19/Lamada—遍历过滤/</id>
    <published>2019-09-19T13:31:00.000Z</published>
    <updated>2019-09-25T06:49:41.818Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Wed Sep 25 2019 14:51:10 GMT+0800 (中国标准时间) --><p>java8以前，想对list集合进行过滤</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">//不要用Arrays.asList,迭代器删除会失败</span><br><span class="line">List&lt;String&gt; list = new ArrayList&lt;&gt;(3);</span><br><span class="line">list.add(&quot;abc&quot;);</span><br><span class="line">list.add(&quot;bbc&quot;);</span><br><span class="line">list.add(&quot;cbc&quot;);</span><br><span class="line"></span><br><span class="line">//过滤以字母 a 开头的字符串</span><br><span class="line">List&lt;String&gt; res = new ArrayList&lt;&gt;();</span><br><span class="line">for (String s : list) &#123;</span><br><span class="line">    if (!s.startsWith(&quot;a&quot;)) &#123;</span><br><span class="line">        res.add(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//或者这样</span><br><span class="line">Iterator&lt;String&gt; it = list.iterator();</span><br><span class="line">while (it.hasNext()) &#123;</span><br><span class="line">    String next = it.next();</span><br><span class="line">    if (next.startsWith(&quot;a&quot;)) &#123;</span><br><span class="line">        it.remove();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>java8使用lamada实现如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; res = list.stream().filter(s -&gt; !s.startsWith(&quot;a&quot;)).collect(Collectors.toList());</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Wed Sep 25 2019 14:51:10 GMT+0800 (中国标准时间) --&gt;&lt;p&gt;java8以前，想对list集合进行过滤&lt;/p&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td clas
      
    
    </summary>
    
    
      <category term="Java" scheme="https://zjcool.github.io/categories/Java/"/>
    
    
      <category term="Lamada" scheme="https://zjcool.github.io/tags/Lamada/"/>
    
  </entry>
  
  <entry>
    <title>[Lamada]-实现runnable</title>
    <link href="https://zjcool.github.io/2019/09/19/Lamada%E2%80%94%E5%AE%9E%E7%8E%B0runnable/"/>
    <id>https://zjcool.github.io/2019/09/19/Lamada—实现runnable/</id>
    <published>2019-09-19T13:05:00.000Z</published>
    <updated>2019-09-25T06:50:41.227Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Wed Sep 25 2019 14:51:10 GMT+0800 (中国标准时间) --><p>在 Java8 之前开一个新的线程执行任务,具体代码实现如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">//java8 之前</span><br><span class="line">new Thread(new Runnable() &#123;</span><br><span class="line">             @Override</span><br><span class="line">             public void run() &#123;</span><br><span class="line">                 System.out.println(&quot;开一个新的线程，执行任务了&quot;);</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;).start();</span><br></pre></td></tr></table></figure><p>而java8 提供了lamada表达式，我们可以这样实现：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">new Thread(() -&gt; System.out.println(&quot;开一个新的线程，执行任务了&quot;)).start();</span><br></pre></td></tr></table></figure><p>怎么样，这样的匿名内部实现是不是非常的简单呢！</p><p><strong>补充</strong>：<br>Calculate 是一个接口，里面有一个接口方法cal。如果你想实现该接口，但又不想建一个新的类，可以写成如下这样：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Calculate calculate = (int a, int b) -&gt; a + b;</span><br><span class="line">calculate.cal(1,2);</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Wed Sep 25 2019 14:51:10 GMT+0800 (中国标准时间) --&gt;&lt;p&gt;在 Java8 之前开一个新的线程执行任务,具体代码实现如下：&lt;/p&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;
      
    
    </summary>
    
    
      <category term="Java" scheme="https://zjcool.github.io/categories/Java/"/>
    
    
      <category term="Lamada" scheme="https://zjcool.github.io/tags/Lamada/"/>
    
  </entry>
  
  <entry>
    <title>[k8s]-常用命令</title>
    <link href="https://zjcool.github.io/2019/09/17/K8S-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>https://zjcool.github.io/2019/09/17/K8S-常用命令/</id>
    <published>2019-09-17T14:22:00.000Z</published>
    <updated>2019-09-25T06:50:06.157Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Wed Sep 25 2019 14:51:10 GMT+0800 (中国标准时间) --><p>一、POD级别的操作</p><ul><li><p>获取kube-system命名空间下的所有pod(详细)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl get po -nkube-system（-o wide）</span><br></pre></td></tr></table></figure></li><li><p>获取kube-system命名空间下名为<code>app1</code>的pod的信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl describe po app1 -nkube-system</span><br></pre></td></tr></table></figure></li><li><p>删除kube-system命名空间下名为<code>app1</code>的pod</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl delete po app1 -nkube-system</span><br></pre></td></tr></table></figure></li><li><p>获取kube-system命名空间下名为<code>app1</code>的pod的日志信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl logs app1 -nkube-system</span><br></pre></td></tr></table></figure></li></ul><hr><p>二、Deploy级别的操作</p><ul><li><p>获取kube-system命名空间下的所有deploy(详细)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl get deploy -n kube-system（-o wide）</span><br></pre></td></tr></table></figure></li><li><p>编辑kube-system命名空间下的名为<code>deployA</code> 的deploy</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl edit deploy deployA -n kube-system</span><br></pre></td></tr></table></figure></li><li><p>更新kube-system命名空间下名为<code>deployA</code>里容器<code>app1</code>的镜像</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl set image deploy deployA app1=nginx:1.9.1</span><br></pre></td></tr></table></figure></li><li><p>修改kube-system命名空间下名为<code>deployA</code>里容器<code>app1</code>的资源限制</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl set resources deploy deployA -c=app1 --limits=cpu=200m,memory=512Mi</span><br></pre></td></tr></table></figure></li><li><p>修改kube-system命名空间下名为<code>deployA</code>所有容器的资源限制</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl set resources deploy deployA· --limits=cpu=200m,memory=512Mi</span><br></pre></td></tr></table></figure></li></ul><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Wed Sep 25 2019 14:51:10 GMT+0800 (中国标准时间) --&gt;&lt;p&gt;一、POD级别的操作&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;获取kube-system命名空间下的所有pod(详细)&lt;/p&gt;&lt;figure class=&quot;hig
      
    
    </summary>
    
    
    
      <category term="k8s" scheme="https://zjcool.github.io/tags/k8s/"/>
    
      <category term="kubernetes" scheme="https://zjcool.github.io/tags/kubernetes/"/>
    
  </entry>
  
  <entry>
    <title>[Lamada]-List转Map</title>
    <link href="https://zjcool.github.io/2019/09/17/Lamada-List-Map/"/>
    <id>https://zjcool.github.io/2019/09/17/Lamada-List-Map/</id>
    <published>2019-09-17T12:29:00.000Z</published>
    <updated>2019-09-25T06:50:20.340Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Wed Sep 25 2019 14:51:10 GMT+0800 (中国标准时间) --><p>List to Map 一般可以分为以下几种情况:</p><ol><li>分组</li><li>去重</li></ol><p><strong>User.java</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">import lombok.AllArgsConstructor;</span><br><span class="line">import lombok.Data;</span><br><span class="line">import java.util.ArrayList;</span><br><span class="line">import java.util.List;</span><br><span class="line">import java.util.Map;</span><br><span class="line">import java.util.function.Function;</span><br><span class="line">import java.util.stream.Collectors;</span><br><span class="line"></span><br><span class="line">@Data</span><br><span class="line">@AllArgsConstructor</span><br><span class="line">public class User &#123;</span><br><span class="line">    private String name;</span><br><span class="line"></span><br><span class="line">    private Integer age;</span><br><span class="line"></span><br><span class="line">    private Integer grade;</span><br><span class="line"></span><br><span class="line">    private String sex;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        List&lt;User&gt; users =new ArrayList&lt;&gt;();</span><br><span class="line">        users.add(new User(&quot;zhangsan&quot;,18,90,&quot;男&quot;));</span><br><span class="line">        users.add(new User(&quot;zhangsan&quot;,19,90,&quot;男&quot;));</span><br><span class="line">        users.add(new User(&quot;lisi&quot;,19,91,&quot;女&quot;));</span><br><span class="line">        //list to map</span><br><span class="line">        //1.分组，按照姓名分组</span><br><span class="line">        Map&lt;String, List&lt;User&gt;&gt; listMap = users.stream().collect(</span><br><span class="line">                Collectors.groupingBy(User::getName));</span><br><span class="line"></span><br><span class="line">        //2.分组统计 男女</span><br><span class="line">        Map&lt;String, Long&gt; collect = users.stream().collect(</span><br><span class="line">                Collectors.groupingBy(User::getSex, Collectors.counting())</span><br><span class="line">        );</span><br><span class="line">        </span><br><span class="line">        //3.去重，根据年纪，后面的替换前面的，不加会跑出异常</span><br><span class="line">        Map&lt;Integer, User&gt; userMap = users.stream().collect(</span><br><span class="line">                        Collectors.toMap(</span><br><span class="line">                        User::getAge, Function.identity(),</span><br><span class="line">                        (oldUser, newUser) -&gt; newUser));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Wed Sep 25 2019 14:51:10 GMT+0800 (中国标准时间) --&gt;&lt;p&gt;List to Map 一般可以分为以下几种情况:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;分组&lt;/li&gt;&lt;li&gt;去重&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;strong&gt;User
      
    
    </summary>
    
    
      <category term="Java" scheme="https://zjcool.github.io/categories/Java/"/>
    
    
      <category term="Lamada" scheme="https://zjcool.github.io/tags/Lamada/"/>
    
  </entry>
  
</feed>
