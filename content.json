{"meta":{"title":"回归初心，轻装前行","subtitle":null,"description":null,"author":"zhangj","url":"https://zjcool.github.io","root":"/"},"pages":[{"title":"","date":"2019-09-07T02:51:18.828Z","updated":"2019-09-07T02:51:18.828Z","comments":true,"path":"hexo-admin-ehc-images.json","permalink":"https://zjcool.github.io/hexo-admin-ehc-images.json","excerpt":"","text":"[{\"name\":\"DASHENG-900x700-1.png\",\"date\":1518959551960},{\"name\":\"DASHENG-900x700-2.png\",\"date\":1518959599098},{\"name\":\"DASHENG-900x700-3.png\",\"date\":1518959609913},{\"name\":\"DASHENG-900x700-4.png\",\"date\":1518959618105}]"},{"title":"关于自己","date":"2019-09-07T03:07:32.000Z","updated":"2019-09-19T13:00:34.472Z","comments":false,"path":"about/index.html","permalink":"https://zjcool.github.io/about/index.html","excerpt":"","text":"回头补充"},{"title":"分类","date":"2019-09-18T18:07:01.000Z","updated":"2019-09-18T18:09:28.869Z","comments":false,"path":"categories/index.html","permalink":"https://zjcool.github.io/categories/index.html","excerpt":"","text":""},{"title":"标签","date":"2019-09-18T18:10:41.000Z","updated":"2019-09-18T18:11:06.825Z","comments":false,"path":"tags/index.html","permalink":"https://zjcool.github.io/tags/index.html","excerpt":"","text":""},{"title":"友情链接","date":"2019-09-23T15:30:47.000Z","updated":"2019-09-23T15:30:47.094Z","comments":true,"path":"links/index.html","permalink":"https://zjcool.github.io/links/index.html","excerpt":"","text":""}],"posts":[{"title":"java—获取当天剩余秒数","slug":"java—获取当天剩余秒数","date":"2019-09-23T15:11:02.000Z","updated":"2019-09-23T15:25:13.940Z","comments":true,"path":"2019/09/23/java—获取当天剩余秒数/","link":"","permalink":"https://zjcool.github.io/2019/09/23/java—获取当天剩余秒数/","excerpt":"","text":"获取当天剩余秒数两种方法1.线程不安全12345678910public static Integer getLeftTime() &#123; Calendar midnight=Calendar.getInstance(); midnight.setTime(new Date()); midnight.add(midnight.DAY_OF_MONTH,1);//加一天 midnight.set(midnight.HOUR_OF_DAY,0); midnight.set(midnight.MINUTE,0); midnight.set(midnight.SECOND,0); midnight.set(midnight.MILLISECOND,0); return (int)((midnight.getTime().getTime()-currentDate.getTime())/1000); &#125;2.线程安全12345678910 Date now = new Date(); LocalDateTime midnight = LocalDateTime.ofInstant(now.toInstant(), ZoneId.systemDefault()); midnight.plusDays(1) .withHour(0) .withMinute(0) .withSecond(0) .withNano(0); LocalDateTime current = LocalDateTime.ofInstant(now.toInstant(), ZoneId.systemDefault()); return (int) ChronoUnit.SECONDS.between(current, midnight);&#125;","categories":[],"tags":[],"author":"zhangj"},{"title":"Java8—Predicate用法","slug":"Java8—Predicate用法","date":"2019-09-19T14:58:00.000Z","updated":"2019-09-19T15:46:09.236Z","comments":true,"path":"2019/09/19/Java8—Predicate用法/","link":"","permalink":"https://zjcool.github.io/2019/09/19/Java8—Predicate用法/","excerpt":"","text":"每次失眠都要庆幸，多了一次可以深刻思考的机会！废话说完,直接上代码：筛选以字母c结尾的字符串1Predicate&lt;String&gt; condition2 = s -&gt; s.endsWith(&quot;c&quot;);筛选以字母a开头的字符串12345Predicate&lt;String&gt; condition1 = s -&gt; s.startsWith(&quot;a&quot;);boolean res1 = condition1.test(&quot;abc&quot;); //true//negate 取反的意思boolean res2 = condition1.negate().test(&quot;abc&quot;) //false筛选以字母a开头 且 以字母c结尾的字符串1Predicate&lt;String&gt; and = condition.and(condition2);筛选以字母a开头 或 以字母c结尾的字符串1Predicate&lt;String&gt; and = condition.or(condition2);筛选大于3的数字1Predicate&lt;Integer&gt; condition2 = a -&gt; a &gt;=3;遍历集合删除以a开头的字符串1List&lt;String&gt; res4 = list.stream().filter(condition1.negate()).collect(Collectors.toList(););","categories":[{"name":"Java","slug":"Java","permalink":"https://zjcool.github.io/categories/Java/"}],"tags":[{"name":"Predicate","slug":"Predicate","permalink":"https://zjcool.github.io/tags/Predicate/"}],"author":"zhangj"},{"title":"Lamada—遍历过滤","slug":"Lamada—遍历过滤","date":"2019-09-19T13:31:00.000Z","updated":"2019-09-19T14:56:21.266Z","comments":true,"path":"2019/09/19/Lamada—遍历过滤/","link":"","permalink":"https://zjcool.github.io/2019/09/19/Lamada—遍历过滤/","excerpt":"","text":"java8以前，想对list集合进行过滤12345678910111213141516171819202122//不要用Arrays.asList,迭代器删除会失败List&lt;String&gt; list = new ArrayList&lt;&gt;(3);list.add(&quot;abc&quot;);list.add(&quot;bbc&quot;);list.add(&quot;cbc&quot;);//过滤以字母 a 开头的字符串List&lt;String&gt; res = new ArrayList&lt;&gt;();for (String s : list) &#123; if (!s.startsWith(&quot;a&quot;)) &#123; res.add(s); &#125;&#125;//或者这样Iterator&lt;String&gt; it = list.iterator();while (it.hasNext()) &#123; String next = it.next(); if (next.startsWith(&quot;a&quot;)) &#123; it.remove(); &#125;&#125;java8使用lamada实现如下：1List&lt;String&gt; res = list.stream().filter(s -&gt; !s.startsWith(&quot;a&quot;)).collect(Collectors.toList());","categories":[{"name":"Java","slug":"Java","permalink":"https://zjcool.github.io/categories/Java/"}],"tags":[{"name":"Lamada","slug":"Lamada","permalink":"https://zjcool.github.io/tags/Lamada/"}],"author":"zhangj"},{"title":"Lamada—实现runnable","slug":"Lamada—实现runnable","date":"2019-09-19T13:05:00.000Z","updated":"2019-09-19T13:59:33.756Z","comments":true,"path":"2019/09/19/Lamada—实现runnable/","link":"","permalink":"https://zjcool.github.io/2019/09/19/Lamada—实现runnable/","excerpt":"","text":"在 Java8 之前开一个新的线程执行任务,具体代码实现如下：1234567//java8 之前new Thread(new Runnable() &#123; @Override public void run() &#123; System.out.println(&quot;开一个新的线程，执行任务了&quot;); &#125; &#125;).start();而java8 提供了lamada表达式，我们可以这样实现：1new Thread(() -&gt; System.out.println(&quot;开一个新的线程，执行任务了&quot;)).start();怎么样，这样的匿名内部实现是不是非常的简单呢！补充：Calculate 是一个接口，里面有一个接口方法cal。如果你想实现该接口，但又不想建一个新的类，可以写成如下这样：12Calculate calculate = (int a, int b) -&gt; a + b;calculate.cal(1,2);","categories":[{"name":"Java","slug":"Java","permalink":"https://zjcool.github.io/categories/Java/"}],"tags":[{"name":"Lamada","slug":"Lamada","permalink":"https://zjcool.github.io/tags/Lamada/"}],"author":"zhangj"},{"title":"k8s—常用命令","slug":"K8S-常用命令","date":"2019-09-17T14:22:00.000Z","updated":"2019-09-19T13:11:05.557Z","comments":true,"path":"2019/09/17/K8S-常用命令/","link":"","permalink":"https://zjcool.github.io/2019/09/17/K8S-常用命令/","excerpt":"","text":"一、POD级别的操作获取kube-system命名空间下的所有pod(详细)1kubectl get po -nkube-system（-o wide）获取kube-system命名空间下名为app1的pod的信息1kubectl describe po app1 -nkube-system删除kube-system命名空间下名为app1的pod1kubectl delete po app1 -nkube-system获取kube-system命名空间下名为app1的pod的日志信息1kubectl logs app1 -nkube-system二、Deploy级别的操作获取kube-system命名空间下的所有deploy(详细)1kubectl get deploy -n kube-system（-o wide）编辑kube-system命名空间下的名为deployA 的deploy1kubectl edit deploy deployA -n kube-system更新kube-system命名空间下名为deployA里容器app1的镜像1kubectl set image deploy deployA app1=nginx:1.9.1修改kube-system命名空间下名为deployA里容器app1的资源限制1kubectl set resources deploy deployA -c=app1 --limits=cpu=200m,memory=512Mi修改kube-system命名空间下名为deployA所有容器的资源限制1kubectl set resources deploy deployA· --limits=cpu=200m,memory=512Mi","categories":[],"tags":[{"name":"k8s","slug":"k8s","permalink":"https://zjcool.github.io/tags/k8s/"},{"name":"kubernetes","slug":"kubernetes","permalink":"https://zjcool.github.io/tags/kubernetes/"}],"author":"zhangj"},{"title":"Lamada—List转Map","slug":"Lamada-List-Map","date":"2019-09-17T12:29:00.000Z","updated":"2019-09-19T14:00:29.384Z","comments":true,"path":"2019/09/17/Lamada-List-Map/","link":"","permalink":"https://zjcool.github.io/2019/09/17/Lamada-List-Map/","excerpt":"","text":"List to Map 一般可以分为以下几种情况:分组去重User.java1234567891011121314151617181920212223242526272829303132333435363738394041import lombok.AllArgsConstructor;import lombok.Data;import java.util.ArrayList;import java.util.List;import java.util.Map;import java.util.function.Function;import java.util.stream.Collectors;@Data@AllArgsConstructorpublic class User &#123; private String name; private Integer age; private Integer grade; private String sex; public static void main(String[] args) &#123; List&lt;User&gt; users =new ArrayList&lt;&gt;(); users.add(new User(&quot;zhangsan&quot;,18,90,&quot;男&quot;)); users.add(new User(&quot;zhangsan&quot;,19,90,&quot;男&quot;)); users.add(new User(&quot;lisi&quot;,19,91,&quot;女&quot;)); //list to map //1.分组，按照姓名分组 Map&lt;String, List&lt;User&gt;&gt; listMap = users.stream().collect( Collectors.groupingBy(User::getName)); //2.分组统计 男女 Map&lt;String, Long&gt; collect = users.stream().collect( Collectors.groupingBy(User::getSex, Collectors.counting()) ); //3.去重，根据年纪，后面的替换前面的，不加会跑出异常 Map&lt;Integer, User&gt; userMap = users.stream().collect( Collectors.toMap( User::getAge, Function.identity(), (oldUser, newUser) -&gt; newUser)); &#125;&#125;","categories":[{"name":"Java","slug":"Java","permalink":"https://zjcool.github.io/categories/Java/"}],"tags":[{"name":"Lamada","slug":"Lamada","permalink":"https://zjcool.github.io/tags/Lamada/"}],"author":"zhangj"}]}