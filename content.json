{"meta":{"title":"回归初心，轻装前行","subtitle":null,"description":null,"author":"zhangj","url":"https://zjcool.github.io","root":"/"},"pages":[{"title":"categories","date":"2019-12-17T21:08:03.000Z","updated":"2019-12-17T21:37:57.326Z","comments":true,"path":"categories/index.html","permalink":"https://zjcool.github.io/categories/index.html","excerpt":"","text":""},{"title":"archives","date":"2019-12-17T21:08:13.000Z","updated":"2019-12-17T21:08:13.393Z","comments":true,"path":"archives/index.html","permalink":"https://zjcool.github.io/archives/index.html","excerpt":"","text":""},{"title":"tags","date":"2019-12-17T21:07:27.000Z","updated":"2019-12-17T21:48:06.599Z","comments":true,"path":"tags/index.html","permalink":"https://zjcool.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"【明明白白系列之 ArrayList（4）】--子集合 与 序列化","slug":"【明明白白系列之-ArrayList（4）】-子集合","date":"2019-12-30T07:44:57.000Z","updated":"2019-12-31T01:48:11.841Z","comments":true,"path":"2019/12/30/【明明白白系列之-ArrayList（4）】-子集合/","link":"","permalink":"https://zjcool.github.io/2019/12/30/【明明白白系列之-ArrayList（4）】-子集合/","excerpt":"序列化与反序列化再介绍序列化之前，先思考几个问题：什么是序列化？序列化的作用？Java中如何实现序列化？为什么 ArrayList 需要自己实现序列化？我们知道数据在网络中传输是用二进制流传输的。因此 ArrayList 需要将自己转为二进制，再进行传输。将自己转为二进制的过程称为序列化，反之则称为反序列化。JAVA规定被序列化的对象必须实现java.io.Serializable这个接口，而我们分析的目标ArrayList同样实现了该接口，从而是实现自动序列化。但是我们通过分析源码发现存储数据的数组被 transient 修饰了。1transient Object[] elementData;这个关键字的作用是自动序列化的时候，不需要序列化这个字段。这又是什么原因呢？","text":"序列化与反序列化再介绍序列化之前，先思考几个问题：什么是序列化？序列化的作用？Java中如何实现序列化？为什么 ArrayList 需要自己实现序列化？我们知道数据在网络中传输是用二进制流传输的。因此 ArrayList 需要将自己转为二进制，再进行传输。将自己转为二进制的过程称为序列化，反之则称为反序列化。JAVA规定被序列化的对象必须实现java.io.Serializable这个接口，而我们分析的目标ArrayList同样实现了该接口，从而是实现自动序列化。但是我们通过分析源码发现存储数据的数组被 transient 修饰了。1transient Object[] elementData;这个关键字的作用是自动序列化的时候，不需要序列化这个字段。这又是什么原因呢？其实这个主要是因为ArrayList是有一个自动扩容的机制，我们知道ArrayList默认的大小是10，如果我存11个元素时，elementData.length 就会变成15。但是实际只有11个值，如果这个时候直接序列化，那么有4个值被浪费了。当ArrayList 变得够大时，浪费的空间也就越多。因此，ArrayList自己实现了序列化。123for (int i=0; i&lt;size; i++) &#123; s.writeObject(elementData[i]); &#125;详细代码如下：1234567891011121314151617181920212223242526272829303132333435363738394041424344//简单理解为序列化，转为输出流 private void writeObject(java.io.ObjectOutputStream s) throws java.io.IOException&#123; // Write out element count, and any hidden stuff int expectedModCount = modCount; s.defaultWriteObject(); // Write out size as capacity for behavioural compatibility with clone() s.writeInt(size); // Write out all elements in the proper order. for (int i=0; i&lt;size; i++) &#123; s.writeObject(elementData[i]); &#125; if (modCount != expectedModCount) &#123; throw new ConcurrentModificationException(); &#125; &#125; //反序列化，转为输入流 private void readObject(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException &#123; elementData = EMPTY_ELEMENTDATA; // Read in size, and any hidden stuff s.defaultReadObject(); // Read in capacity s.readInt(); // ignored if (size &gt; 0) &#123; // be like clone(), allocate array based upon size not capacity int capacity = calculateCapacity(elementData, size); SharedSecrets.getJavaOISAccess().checkArray(s, Object[].class, capacity); ensureCapacityInternal(size); Object[] a = elementData; // Read in all elements in the proper order. for (int i=0; i&lt;size; i++) &#123; a[i] = s.readObject(); &#125; &#125; &#125;从上面源码又引出另外一个问题，这些方法都定义为private的，那什么时候能调用呢？子集合关于子集合内容，不想介绍过多，因为内容比较简单，SubList提供了List类大部分方法的实现。需要注意的是 SubList 是对 List 的一个截取，任何对 SubList 的操作，都会影响到原有的 List。1234public List&lt;E&gt; subList(int fromIndex, int toIndex) &#123; subListRangeCheck(fromIndex, toIndex, size); return new SubList(this, 0, fromIndex, toIndex);&#125;SubList类具体的代码如下:123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231//私有内部类定义SubListprivate class SubList extends AbstractList&lt;E&gt; implements RandomAccess &#123; private final AbstractList&lt;E&gt; parent; private final int parentOffset; private final int offset; int size; SubList(AbstractList&lt;E&gt; parent, int offset, int fromIndex, int toIndex) &#123; this.parent = parent; this.parentOffset = fromIndex; this.offset = offset + fromIndex; this.size = toIndex - fromIndex; this.modCount = ArrayList.this.modCount; &#125; public E set(int index, E e) &#123; rangeCheck(index); checkForComodification(); E oldValue = ArrayList.this.elementData(offset + index); ArrayList.this.elementData[offset + index] = e; return oldValue; &#125; public E get(int index) &#123; rangeCheck(index); checkForComodification(); return ArrayList.this.elementData(offset + index); &#125; public int size() &#123; checkForComodification(); return this.size; &#125; public void add(int index, E e) &#123; rangeCheckForAdd(index); checkForComodification(); parent.add(parentOffset + index, e); this.modCount = parent.modCount; this.size++; &#125; public E remove(int index) &#123; rangeCheck(index); checkForComodification(); E result = parent.remove(parentOffset + index); this.modCount = parent.modCount; this.size--; return result; &#125; protected void removeRange(int fromIndex, int toIndex) &#123; checkForComodification(); parent.removeRange(parentOffset + fromIndex, parentOffset + toIndex); this.modCount = parent.modCount; this.size -= toIndex - fromIndex; &#125; public boolean addAll(Collection&lt;? extends E&gt; c) &#123; return addAll(this.size, c); &#125; public boolean addAll(int index, Collection&lt;? extends E&gt; c) &#123; rangeCheckForAdd(index); int cSize = c.size(); if (cSize==0) return false; checkForComodification(); parent.addAll(parentOffset + index, c); this.modCount = parent.modCount; this.size += cSize; return true; &#125; public Iterator&lt;E&gt; iterator() &#123; return listIterator(); &#125; public ListIterator&lt;E&gt; listIterator(final int index) &#123; checkForComodification(); rangeCheckForAdd(index); final int offset = this.offset; return new ListIterator&lt;E&gt;() &#123; int cursor = index; int lastRet = -1; int expectedModCount = ArrayList.this.modCount; public boolean hasNext() &#123; return cursor != SubList.this.size; &#125; @SuppressWarnings(\"unchecked\") public E next() &#123; checkForComodification(); int i = cursor; if (i &gt;= SubList.this.size) throw new NoSuchElementException(); Object[] elementData = ArrayList.this.elementData; if (offset + i &gt;= elementData.length) throw new ConcurrentModificationException(); cursor = i + 1; return (E) elementData[offset + (lastRet = i)]; &#125; public boolean hasPrevious() &#123; return cursor != 0; &#125; @SuppressWarnings(\"unchecked\") public E previous() &#123; checkForComodification(); int i = cursor - 1; if (i &lt; 0) throw new NoSuchElementException(); Object[] elementData = ArrayList.this.elementData; if (offset + i &gt;= elementData.length) throw new ConcurrentModificationException(); cursor = i; return (E) elementData[offset + (lastRet = i)]; &#125; @SuppressWarnings(\"unchecked\") public void forEachRemaining(Consumer&lt;? super E&gt; consumer) &#123; Objects.requireNonNull(consumer); final int size = SubList.this.size; int i = cursor; if (i &gt;= size) &#123; return; &#125; final Object[] elementData = ArrayList.this.elementData; if (offset + i &gt;= elementData.length) &#123; throw new ConcurrentModificationException(); &#125; while (i != size &amp;&amp; modCount == expectedModCount) &#123; consumer.accept((E) elementData[offset + (i++)]); &#125; // update once at end of iteration to reduce heap write traffic lastRet = cursor = i; checkForComodification(); &#125; public int nextIndex() &#123; return cursor; &#125; public int previousIndex() &#123; return cursor - 1; &#125; public void remove() &#123; if (lastRet &lt; 0) throw new IllegalStateException(); checkForComodification(); try &#123; SubList.this.remove(lastRet); cursor = lastRet; lastRet = -1; expectedModCount = ArrayList.this.modCount; &#125; catch (IndexOutOfBoundsException ex) &#123; throw new ConcurrentModificationException(); &#125; &#125; public void set(E e) &#123; if (lastRet &lt; 0) throw new IllegalStateException(); checkForComodification(); try &#123; ArrayList.this.set(offset + lastRet, e); &#125; catch (IndexOutOfBoundsException ex) &#123; throw new ConcurrentModificationException(); &#125; &#125; public void add(E e) &#123; checkForComodification(); try &#123; int i = cursor; SubList.this.add(i, e); cursor = i + 1; lastRet = -1; expectedModCount = ArrayList.this.modCount; &#125; catch (IndexOutOfBoundsException ex) &#123; throw new ConcurrentModificationException(); &#125; &#125; final void checkForComodification() &#123; if (expectedModCount != ArrayList.this.modCount) throw new ConcurrentModificationException(); &#125; &#125;; &#125; public List&lt;E&gt; subList(int fromIndex, int toIndex) &#123; subListRangeCheck(fromIndex, toIndex, size); return new SubList(this, offset, fromIndex, toIndex); &#125; private void rangeCheck(int index) &#123; if (index &lt; 0 || index &gt;= this.size) throw new IndexOutOfBoundsException(outOfBoundsMsg(index)); &#125; private void rangeCheckForAdd(int index) &#123; if (index &lt; 0 || index &gt; this.size) throw new IndexOutOfBoundsException(outOfBoundsMsg(index)); &#125; private String outOfBoundsMsg(int index) &#123; return \"Index: \"+index+\", Size: \"+this.size; &#125; private void checkForComodification() &#123; if (ArrayList.this.modCount != this.modCount) throw new ConcurrentModificationException(); &#125; public Spliterator&lt;E&gt; spliterator() &#123; checkForComodification(); return new ArrayListSpliterator&lt;E&gt;(ArrayList.this, offset, offset + this.size, this.modCount); &#125;&#125;","categories":[],"tags":[],"author":"zhangj"},{"title":"【明明白白系列之 ArrayList（3）】-- 迭代","slug":"【明明白白系列之-ArrayList（1）】-遍历与自动扩容","date":"2019-12-27T02:28:00.000Z","updated":"2019-12-27T08:42:50.183Z","comments":true,"path":"2019/12/27/【明明白白系列之-ArrayList（1）】-遍历与自动扩容/","link":"","permalink":"https://zjcool.github.io/2019/12/27/【明明白白系列之-ArrayList（1）】-遍历与自动扩容/","excerpt":"概述工作过的同学对于迭代这个词，肯定不陌生。工作中，我们会将一次开发过程称作一次迭代，经过多次迭代，最后达到期望的产品形态。这里迭代的概念和ArrayList的迭代可能有细微的差别，ArrayList中的迭代是顺序获取每个元素，而工作的开发迭代，在特殊情况下可能不一定是顺序进行的。那么今天我们就来好好聊聊 ArrayList 是如何迭代的。ArrayList中的迭代fail-fast 机制在聊迭代之前，我想先介绍下fail-fast机制。fail-fast 机制，字面含义是快速失败机制，是Java集合(Collection)中的一种错误检测机制。","text":"概述工作过的同学对于迭代这个词，肯定不陌生。工作中，我们会将一次开发过程称作一次迭代，经过多次迭代，最后达到期望的产品形态。这里迭代的概念和ArrayList的迭代可能有细微的差别，ArrayList中的迭代是顺序获取每个元素，而工作的开发迭代，在特殊情况下可能不一定是顺序进行的。那么今天我们就来好好聊聊 ArrayList 是如何迭代的。ArrayList中的迭代fail-fast 机制在聊迭代之前，我想先介绍下fail-fast机制。fail-fast 机制，字面含义是快速失败机制，是Java集合(Collection)中的一种错误检测机制。在迭代集合的过程中，当集合在结构上（包含的元素个数）发生改变的时候，就有可能会发生fail-fast，会抛出ConcurrentModificationException异常。fail-fast机制并不保证在不同步的修改下一定会抛出异常，它只是尽最大努力去抛出，所以这种机制一般仅用于检测bug。并发情况下会出现异常，并发情况下建议使用 CopyOnWriteArrayList。简单来说就是，如果一个线程在对 ArrayList 进行迭代，另外一个线程同时在对 Arraylsit 进行增删，那么就有极大的可能触发 fail-fast，抛出 ConcurrentModificationException异常。 举个栗子，比如记账数钱，我正一张张数的开心呢，你突然给我抽一张走或者加一张进来，这个记账肯定就进行不下去了。那么fail-fast机制在ArrayList中如何实现呢？其实之前文章就有提到过modCount的字段，它就是实现 fail-fast机制的核心。每次在集合增删的时候会对 modCount 进行加1操作，可以理解为集合元素大小的变化频次。而在迭代开始前，会将最初的modCount 记为expectedModCount。 迭代时，首先检查 expectedModCount 和当前的modCount是否相等，一旦不等，就触发 fail-fast机制。1234final void checkForComodification() &#123; if (expectedModCount != ArrayList.this.modCount) throw new ConcurrentModificationException();&#125;这里需要着重说明一点，替换集合中的元素，modCount不会发生变化迭代器迭代，那自然是需要迭代器的，Arraylist 中提供了三种迭代器 Itr 、 ListItr和ArrayListSpliterator 。12345678910111213141516171819202122// 返回一个指定索引开始的迭代器 ListIterator public ListIterator&lt;E&gt; listIterator(int index) &#123; if (index &lt; 0 || index &gt; size) throw new IndexOutOfBoundsException(\"Index: \"+index); return new ListItr(index); &#125; //返回一个从零开始的迭代器 ListIterator public ListIterator&lt;E&gt; listIterator() &#123; return new ListItr(0); &#125; // 返回一个从零开始的迭代器 Iterator public Iterator&lt;E&gt; iterator() &#123; return new Itr(); &#125; //分段迭代器 @Override public Spliterator&lt;E&gt; spliterator() &#123; return new ArrayListSpliterator&lt;&gt;(this, 0, -1, 0); &#125;Itr 迭代器Itr迭代器，提供了两种迭代方式。一种是常规的** hasNext() 方法和 **next 方法结合的方式。另外一种就是 forEachRemaining()方法。常规的方式就是取出来元素处理，而另外一种 forEachRemaining() 方法 是 java8 中函数式接口的方式，可以将处理函数传入。12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667//AbstractList.Itr 的优化版本private class Itr implements Iterator&lt;E&gt; &#123; int cursor; // index of next element to return int lastRet = -1; // index of last element returned; -1 if no such int expectedModCount = modCount; Itr() &#123;&#125; public boolean hasNext() &#123; return cursor != size; &#125; @SuppressWarnings(\"unchecked\") public E next() &#123; checkForComodification(); int i = cursor; if (i &gt;= size) throw new NoSuchElementException(); Object[] elementData = ArrayList.this.elementData; if (i &gt;= elementData.length) throw new ConcurrentModificationException(); cursor = i + 1; return (E) elementData[lastRet = i]; &#125; public void remove() &#123; if (lastRet &lt; 0) throw new IllegalStateException(); checkForComodification(); try &#123; ArrayList.this.remove(lastRet); cursor = lastRet; lastRet = -1; expectedModCount = modCount; &#125; catch (IndexOutOfBoundsException ex) &#123; throw new ConcurrentModificationException(); &#125; &#125; @Override @SuppressWarnings(\"unchecked\") public void forEachRemaining(Consumer&lt;? super E&gt; consumer) &#123; Objects.requireNonNull(consumer); final int size = ArrayList.this.size; int i = cursor; if (i &gt;= size) &#123; return; &#125; final Object[] elementData = ArrayList.this.elementData; if (i &gt;= elementData.length) &#123; throw new ConcurrentModificationException(); &#125; while (i != size &amp;&amp; modCount == expectedModCount) &#123; consumer.accept((E) elementData[i++]); &#125; // update once at end of iteration to reduce heap write traffic cursor = i; lastRet = i - 1; checkForComodification(); &#125; final void checkForComodification() &#123; if (modCount != expectedModCount) throw new ConcurrentModificationException(); &#125;&#125;ListItr 迭代器在Itr迭代器的基础上做了功能增强。增强的功能有：增加了向前迭代的方式。提供了更新和添加元素的方法，即迭代的过程中可以新增元素或者更新元素，但必须是当前迭代器来新增，不能是其他线程。1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859// AbstractList.ListItr 的优化版本private class ListItr extends Itr implements ListIterator&lt;E&gt; &#123; ListItr(int index) &#123; super(); cursor = index; &#125; public boolean hasPrevious() &#123; return cursor != 0; &#125; public int nextIndex() &#123; return cursor; &#125; public int previousIndex() &#123; return cursor - 1; &#125; @SuppressWarnings(\"unchecked\") public E previous() &#123; checkForComodification(); int i = cursor - 1; if (i &lt; 0) throw new NoSuchElementException(); Object[] elementData = ArrayList.this.elementData; if (i &gt;= elementData.length) throw new ConcurrentModificationException(); cursor = i; return (E) elementData[lastRet = i]; &#125; public void set(E e) &#123; if (lastRet &lt; 0) throw new IllegalStateException(); checkForComodification(); try &#123; ArrayList.this.set(lastRet, e); &#125; catch (IndexOutOfBoundsException ex) &#123; throw new ConcurrentModificationException(); &#125; &#125; //添加元素，更新 expectedModCount public void add(E e) &#123; checkForComodification(); try &#123; int i = cursor; ArrayList.this.add(i, e); cursor = i + 1; lastRet = -1; expectedModCount = modCount; &#125; catch (IndexOutOfBoundsException ex) &#123; throw new ConcurrentModificationException(); &#125; &#125;&#125;ArrayListSpliterator 分段迭代器为什么需要分段迭代呢，个人理解主要是为了加快在多核下的迭代速度，可以将集合分割为多个迭代器，多个线程各自迭代，完成所有的迭代工作123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112/** * 基于索引的、二分的、懒加载器 * Index-based split-by-two, lazily initialized Spliterator */static final class ArrayListSpliterator&lt;E&gt; implements Spliterator&lt;E&gt; &#123; // 用于存放ArrayList对象 private final ArrayList&lt;E&gt; list; // 当前位置（包含），advance/spilt操作时会被修改 private int index; // current index, modified on advance/split // 结束位置（不包含），-1表示到最后一个元素 private int fence; // -1 until used; then one past last index // 用于存放list的modCount private int expectedModCount; // initialized when fence set /** * Create new spliterator covering the given range */ ArrayListSpliterator(ArrayList&lt;E&gt; list, int origin, int fence, int expectedModCount) &#123; this.list = list; // OK if null unless traversed this.index = origin; this.fence = fence; this.expectedModCount = expectedModCount; &#125; // 第一次使用时实例化结束位置 private int getFence() &#123; // initialize fence to size on first use int hi; // (a specialized variant appears in method forEach) ArrayList&lt;E&gt; lst; // 第一次初始化时，fence才会小于0 if ((hi = fence) &lt; 0) &#123; // 如果集合中没有元素 if ((lst = list) == null) hi = fence = 0; else &#123; expectedModCount = lst.modCount; hi = fence = lst.size; &#125; &#125; return hi; &#125; // 分割list,返回一个返回一个新分割出的spilterator实例 // 相当于二分法，这个方法会递归 // 1. ArrayListSpilterator本质还是对原list进行操作，只是通过index和fence来控制每次处理的范围 public ArrayListSpliterator&lt;E&gt; trySplit() &#123; // hi结束位置（不包括） lo:开始位置 mid中间位置 int hi = getFence(), lo = index, mid = (lo + hi) &gt;&gt;&gt; 1; // 当lo &gt;= mid， 表示不能再分割 // 当lo &lt; mid时，表示可以分割，切割(lo, mid)出去，同时更新index = mid return (lo &gt;= mid) ? null : // divide range in half unless too small new ArrayListSpliterator&lt;E&gt;(list, lo, index = mid, expectedModCount); &#125; /** * 返回true时，表示可能还有元素未处理 * 返回falsa时，没有剩余元素处理了 * * @param action * @return */ public boolean tryAdvance(Consumer&lt;? super E&gt; action) &#123; if (action == null) throw new NullPointerException(); int hi = getFence(), i = index; if (i &lt; hi) &#123; index = i + 1; @SuppressWarnings(\"unchecked\") E e = (E) list.elementData[i]; action.accept(e); if (list.modCount != expectedModCount) throw new ConcurrentModificationException(); return true; &#125; return false; &#125; /** * 顺序遍历处理所有剩下的元素 * * @param action */ public void forEachRemaining(Consumer&lt;? super E&gt; action) &#123; int i, hi, mc; // hoist accesses and checks from loop ArrayList&lt;E&gt; lst; Object[] a; if (action == null) throw new NullPointerException(); // 如果list不为空，且list中的元素不为空 if ((lst = list) != null &amp;&amp; (a = lst.elementData) != null) &#123; // 当fence &lt; 0 时，表示fence和exceptModCount未初始化 if ((hi = fence) &lt; 0) &#123; mc = lst.modCount; hi = lst.size; &#125; else mc = expectedModCount; if ((i = index) &gt;= 0 &amp;&amp; (index = hi) &lt;= a.length) &#123; for (; i &lt; hi; ++i) &#123; @SuppressWarnings(\"unchecked\") E e = (E) a[i]; action.accept(e); &#125; if (lst.modCount == mc) return; &#125; &#125; throw new ConcurrentModificationException(); &#125; // 估算大小 public long estimateSize() &#123; return (long) (getFence() - index); &#125; // 返回特征值 public int characteristics() &#123; return Spliterator.ORDERED | Spliterator.SIZED | Spliterator.SUBSIZED; &#125;&#125;遍历最常用的遍历方式，其实跟之前迭代器里 forEachRemaining() 方法很像，其实它们完成的工作基本上一致的。1234567891011121314151617//遍历操作 @Override public void forEach(Consumer&lt;? super E&gt; action) &#123; Objects.requireNonNull(action); final int expectedModCount = modCount; @SuppressWarnings(\"unchecked\") final E[] elementData = (E[]) this.elementData; final int size = this.size; //fail-fast机制 for (int i=0; modCount == expectedModCount &amp;&amp; i &lt; size; i++) &#123; action.accept(elementData[i]); &#125; if (modCount != expectedModCount) &#123; throw new ConcurrentModificationException(); &#125; &#125;ok，关于ArrayList 迭代方面知识就介绍到这里。","categories":[{"name":"明明白白系列","slug":"明明白白系列","permalink":"https://zjcool.github.io/categories/明明白白系列/"}],"tags":[{"name":"ArrayList","slug":"ArrayList","permalink":"https://zjcool.github.io/tags/ArrayList/"},{"name":"jdk","slug":"jdk","permalink":"https://zjcool.github.io/tags/jdk/"}],"author":"zhangj"},{"title":"【明明白白系列之 ArrayList（2）】-- 增、删、改、查","slug":"【明明白白系列之-ArrayList（2）】","date":"2019-12-19T03:17:00.000Z","updated":"2019-12-27T06:36:27.949Z","comments":true,"path":"2019/12/19/【明明白白系列之-ArrayList（2）】/","link":"","permalink":"https://zjcool.github.io/2019/12/19/【明明白白系列之-ArrayList（2）】/","excerpt":"概述只要是开发的过的同学，增删改查想必是十分熟悉的。那么今天给大家分享是 ArrayList 里的增删改查，当然这里所谓的“增删改查”是我个人对其的理解。这样的归类是否合理，仁者见仁 。ok，开始吧！增首先介绍的是增，ArrayList提供关于 增 的方法有4个。分别是：在尾部增加单个元素、在特定位置增加单个元素、在尾部增加一个集合、在特定位置开始增加一个集合。详细代码如下:12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849//在尾部添加值 public boolean add(E e) &#123; //自动扩容 ensureCapacityInternal(size + 1); // Increments modCount!! elementData[size++] = e; return true; &#125; // 指定位置添加值, 当前值以及之后的值 往后挪一位 public void add(int index, E element) &#123; //范围检查 rangeCheckForAdd(index); ensureCapacityInternal(size + 1); // Increments modCount!! //当前值和之后的值 往后挪一位 System.arraycopy(elementData, index, elementData, index + 1, size - index); elementData[index] = element; size++; &#125; //在集合尾部添加集合 public boolean addAll(Collection&lt;? extends E&gt; c) &#123; Object[] a = c.toArray(); int numNew = a.length; ensureCapacityInternal(size + numNew); // Increments modCount System.arraycopy(a, 0, elementData, size, numNew); size += numNew; return numNew != 0; &#125; // 在特定位置添加集合 public boolean addAll(int index, Collection&lt;? extends E&gt; c) &#123; rangeCheckForAdd(index); Object[] a = c.toArray(); int numNew = a.length; ensureCapacityInternal(size + numNew); // Increments modCount int numMoved = size - index; if (numMoved &gt; 0) System.arraycopy(elementData, index, elementData, index + numNew, numMoved); System.arraycopy(a, 0, elementData, index, numNew); size += numNew; return numNew != 0; &#125;","text":"概述只要是开发的过的同学，增删改查想必是十分熟悉的。那么今天给大家分享是 ArrayList 里的增删改查，当然这里所谓的“增删改查”是我个人对其的理解。这样的归类是否合理，仁者见仁 。ok，开始吧！增首先介绍的是增，ArrayList提供关于 增 的方法有4个。分别是：在尾部增加单个元素、在特定位置增加单个元素、在尾部增加一个集合、在特定位置开始增加一个集合。详细代码如下:12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849//在尾部添加值 public boolean add(E e) &#123; //自动扩容 ensureCapacityInternal(size + 1); // Increments modCount!! elementData[size++] = e; return true; &#125; // 指定位置添加值, 当前值以及之后的值 往后挪一位 public void add(int index, E element) &#123; //范围检查 rangeCheckForAdd(index); ensureCapacityInternal(size + 1); // Increments modCount!! //当前值和之后的值 往后挪一位 System.arraycopy(elementData, index, elementData, index + 1, size - index); elementData[index] = element; size++; &#125; //在集合尾部添加集合 public boolean addAll(Collection&lt;? extends E&gt; c) &#123; Object[] a = c.toArray(); int numNew = a.length; ensureCapacityInternal(size + numNew); // Increments modCount System.arraycopy(a, 0, elementData, size, numNew); size += numNew; return numNew != 0; &#125; // 在特定位置添加集合 public boolean addAll(int index, Collection&lt;? extends E&gt; c) &#123; rangeCheckForAdd(index); Object[] a = c.toArray(); int numNew = a.length; ensureCapacityInternal(size + numNew); // Increments modCount int numMoved = size - index; if (numMoved &gt; 0) System.arraycopy(elementData, index, elementData, index + numNew, numMoved); System.arraycopy(a, 0, elementData, index, numNew); size += numNew; return numNew != 0; &#125;平时我们常用的是 add（Obj）或者 add(Collection)，很少会在特定位置 add 。这里需要提醒的是，那么在特定位置add的时候，之前在该位置的数据和后面的数据会依次往后挪。删ArrayList提供了很多 删除方法实现，来针对不同场景。详细请看代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153 // 删除索引对应的值，返回移除的值，所有索引后的值，向前移动一位 public E remove(int index) &#123; rangeCheck(index); modCount++; E oldValue = elementData(index); int numMoved = size - index - 1; if (numMoved &gt; 0) System.arraycopy(elementData, index+1, elementData, index, numMoved); elementData[--size] = null; // clear to let GC do its work return oldValue; &#125; //删除值，如果存在，移除第一个，返回true，如果不存在，返回false public boolean remove(Object o) &#123; if (o == null) &#123; for (int index = 0; index &lt; size; index++) if (elementData[index] == null) &#123; fastRemove(index); return true; &#125; &#125; else &#123; for (int index = 0; index &lt; size; index++) if (o.equals(elementData[index])) &#123; fastRemove(index); return true; &#125; &#125; return false; &#125; // 删除索引对应的值 只是不返回删除的值 private void fastRemove(int index) &#123; modCount++; int numMoved = size - index - 1; if (numMoved &gt; 0) System.arraycopy(elementData, index+1, elementData, index, numMoved); elementData[--size] = null; // clear to let GC do its work &#125; // 清空集合 public void clear() &#123; modCount++; // clear to let GC do its work for (int i = 0; i &lt; size; i++) elementData[i] = null; size = 0; &#125; //删除集合一个索引范围的值 protected void removeRange(int fromIndex, int toIndex) &#123; modCount++; int numMoved = size - toIndex; //将 toIndex 之后的值 依次从 fromIndex位置开始复制 System.arraycopy(elementData, toIndex, elementData, fromIndex,numMoved); // clear to let GC do its work int newSize = size - (toIndex-fromIndex); for (int i = newSize; i &lt; size; i++) &#123; elementData[i] = null; &#125; size = newSize; &#125; //删除集合中 包括c集合中的内容 A-B public boolean removeAll(Collection&lt;?&gt; c) &#123; Objects.requireNonNull(c); return batchRemove(c, false); &#125; //删除不在c中的其他元素，即请求交集 public boolean retainAll(Collection&lt;?&gt; c) &#123; Objects.requireNonNull(c); return batchRemove(c, true); &#125; //批量删除具体实现 private boolean batchRemove(Collection&lt;?&gt; c, boolean complement) &#123; final Object[] elementData = this.elementData; int r = 0, w = 0; boolean modified = false; try &#123; for (; r &lt; size; r++) if (c.contains(elementData[r]) == complement) elementData[w++] = elementData[r]; &#125; finally &#123; // Preserve behavioral compatibility with AbstractCollection, // even if c.contains() throws. if (r != size) &#123; System.arraycopy(elementData, r, elementData, w, size - r); w += size - r; &#125; if (w != size) &#123; // clear to let GC do its work for (int i = w; i &lt; size; i++) elementData[i] = null; modCount += size - w; size = w; modified = true; &#125; &#125; return modified; &#125;//根据过滤条件删除，满足条件的删除@Override public boolean removeIf(Predicate&lt;? super E&gt; filter) &#123; Objects.requireNonNull(filter); // figure out which elements are to be removed // any exception thrown from the filter predicate at this stage // will leave the collection unmodified int removeCount = 0; final BitSet removeSet = new BitSet(size); final int expectedModCount = modCount; final int size = this.size; for (int i=0; modCount == expectedModCount &amp;&amp; i &lt; size; i++) &#123; @SuppressWarnings(\"unchecked\") final E element = (E) elementData[i]; if (filter.test(element)) &#123; removeSet.set(i); removeCount++; &#125; &#125; if (modCount != expectedModCount) &#123; throw new ConcurrentModificationException(); &#125; // shift surviving elements left over the spaces left by removed elements final boolean anyToRemove = removeCount &gt; 0; if (anyToRemove) &#123; final int newSize = size - removeCount; for (int i=0, j=0; (i &lt; size) &amp;&amp; (j &lt; newSize); i++, j++) &#123; i = removeSet.nextClearBit(i); elementData[j] = elementData[i]; &#125; for (int k=newSize; k &lt; size; k++) &#123; elementData[k] = null; // Let gc do its work &#125; this.size = newSize; if (modCount != expectedModCount) &#123; throw new ConcurrentModificationException(); &#125; modCount++; &#125; return anyToRemove; &#125;看完增和删的代码，细心的你们，想必也发现了有一行语句会经常出现1modCount++;看着好像也没什么作用，ArrayList 好像也没有定义这个字段。那么先简单剧透一下，这个字段是来着父类AbstractList，目的是为了实现fail-fast机制。这个机制后面会详细的介绍。这里留个思考题，为什么只有增和删会用到这个fail-fast机制呢？改ArrayList 里的改方法不多，代码也十分简单，详细的说明已经在代理里注释了。123456789101112131415161718192021222324 //设置值 返回旧值 public E set(int index, E element) &#123; rangeCheck(index); E oldValue = elementData(index); elementData[index] = element; return oldValue; &#125;//对集合中的元素进行 统一操作，简单的如：加减乘除等等 @Override @SuppressWarnings(\"unchecked\") public void replaceAll(UnaryOperator&lt;E&gt; operator) &#123; Objects.requireNonNull(operator); final int expectedModCount = modCount; final int size = this.size; for (int i=0; modCount == expectedModCount &amp;&amp; i &lt; size; i++) &#123; elementData[i] = operator.apply((E) elementData[i]); &#125; if (modCount != expectedModCount) &#123; throw new ConcurrentModificationException(); &#125; modCount++; &#125;查最后，没错就是最后一个“查”了。老规矩还是很简单（其实是我不知道该说什么，哈哈哈），看代码。123456789101112131415161718192021222324252627282930313233343536373839404142434445464748 // 判断集合是否包含o public boolean contains(Object o) &#123; return indexOf(o) &gt;= 0; &#125; // 返回 集合中第一个o的数组位置,如果没有，返回-1 public int indexOf(Object o) &#123; if (o == null) &#123; for (int i = 0; i &lt; size; i++) if (elementData[i]==null) return i; &#125; else &#123; for (int i = 0; i &lt; size; i++) if (o.equals(elementData[i])) return i; &#125; return -1; &#125; // 返回 集合中最后一个o的数组位置,如果没有，返回-1 public int lastIndexOf(Object o) &#123; if (o == null) &#123; for (int i = size-1; i &gt;= 0; i--) if (elementData[i]==null) return i; &#125; else &#123; for (int i = size-1; i &gt;= 0; i--) if (o.equals(elementData[i])) return i; &#125; return -1; &#125; //返回索引对应的存储值 public E get(int index) &#123; rangeCheck(index); return elementData(index); &#125; //查询是否为空集合 public boolean isEmpty() &#123; return size == 0; &#125;//查询集合大小 public int size() &#123; return size; &#125;ok！增删改查的分享到此结束，但是增删改查之路才刚刚开始。。。","categories":[{"name":"明明白白系列","slug":"明明白白系列","permalink":"https://zjcool.github.io/categories/明明白白系列/"}],"tags":[{"name":"jdk源码","slug":"jdk源码","permalink":"https://zjcool.github.io/tags/jdk源码/"},{"name":"数据结构","slug":"数据结构","permalink":"https://zjcool.github.io/tags/数据结构/"}],"author":"zhangj"},{"title":"【明明白白系列之 ArrayList（1）】-- 字段、构造方法、以及自动扩容","slug":"【jdk源码解析】-ArrayList","date":"2019-12-17T20:20:00.000Z","updated":"2019-12-27T06:26:07.683Z","comments":true,"path":"2019/12/18/【jdk源码解析】-ArrayList/","link":"","permalink":"https://zjcool.github.io/2019/12/18/【jdk源码解析】-ArrayList/","excerpt":"概述平时工作，我们经常会用到ArrayList，但是却从没有好好研究过底层，最近正好有些许闲暇时间，就稍微探究下，那就分享一下自己研读 ArrayList 源码的记录（基于jdk8），如果有什么理解不对的地方，欢迎指正。好了，废话就不多说，直接开始。ArrayList类的所有内容，总结下可分为以下几个部分：构造方法、增、删、改、查、排序、自动扩容、遍历、子集合、序列化。那么接下来，我将一一介绍各个部分，希望能给大家些许帮助，同时也借此机会加深自己对ArrayList的理解。","text":"概述平时工作，我们经常会用到ArrayList，但是却从没有好好研究过底层，最近正好有些许闲暇时间，就稍微探究下，那就分享一下自己研读 ArrayList 源码的记录（基于jdk8），如果有什么理解不对的地方，欢迎指正。好了，废话就不多说，直接开始。ArrayList类的所有内容，总结下可分为以下几个部分：构造方法、增、删、改、查、排序、自动扩容、遍历、子集合、序列化。那么接下来，我将一一介绍各个部分，希望能给大家些许帮助，同时也借此机会加深自己对ArrayList的理解。类字段和实例字段首先，我们先来看看ArrayList类属性和实例属性，代码如下：1234567891011121314151617181920212223public class ArrayList&lt;E&gt; extends AbstractList&lt;E&gt; implements List&lt;E&gt;, RandomAccess, Cloneable, java.io.Serializable&#123; private static final long serialVersionUID = 8683452581122892189L; //默认长度10 private static final int DEFAULT_CAPACITY = 10; // 当初始化大小为0 数组的实现 --- new ArrayList(0) 或者 new ArrayList(collection)且collection.size=0 private static final Object[] EMPTY_ELEMENTDATA = &#123;&#125;; //不指定初始化的的实现 ---- new ArrayList() private static final Object[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA = &#123;&#125;; // 实际存储数据的。当添加第一个数据，会直接将容量大小转为 DEFAULT_CAPACITY（不会被序列化） transient Object[] elementData; // non-private to simplify nested class access //已存在集合中的数据大小 private int size; // 最大的集合大小 private static final int MAX_ARRAY_SIZE = Integer.MAX_VALUE - 8;属性不多，也很好理解， EMPTY_ELEMENTDATA 是构造方法传入0的时候的实现，DEFAULTCAPACITY_EMPTY_ELEMENTDATA 是构造方法不传时的实现。其实没有什么大的区别。唯一需要注意的是DEFAULT_CAPACITY虽然说是默认容量为10，但是实际初始化new ArrayList() 或者 new ArrayList(0) 产生新的实例时，实际的数组长度还是0的。之后介绍的构造方法，我们可以很清楚的认识这一点。 但是在此基础上，一旦添加一个元素，数组容量会总动扩容到10，这里只点一下，后面会详细解释。构造方法ArrayList提供了三个构造方法，详细代码如下。仔细研读下具体实现，就能发现上面我所说的为什么new ArrayList(0)或者new ArrayList() 产生的实例的数组长度是0，而不是默认的10。12345678910111213141516171819202122232425262728// 带初始大小的构造方法 public ArrayList(int initialCapacity) &#123; if (initialCapacity &gt; 0) &#123; this.elementData = new Object[initialCapacity]; &#125; else if (initialCapacity == 0) &#123; this.elementData = EMPTY_ELEMENTDATA; &#125; else &#123; throw new IllegalArgumentException(\"Illegal Capacity: \"+ initialCapacity); &#125; &#125; // 空构造方法 public ArrayList() &#123; this.elementData = DEFAULTCAPACITY_EMPTY_ELEMENTDATA; &#125; // 传入Collection的构造方法 public ArrayList(Collection&lt;? extends E&gt; c) &#123; elementData = c.toArray(); if ((size = elementData.length) != 0) &#123; // c.toArray might (incorrectly) not return Object[] (see 6260652) if (elementData.getClass() != Object[].class) elementData = Arrays.copyOf(elementData, size, Object[].class); &#125; else &#123; // replace with empty array. this.elementData = EMPTY_ELEMENTDATA; &#125; &#125;自动扩容机制大家都知道 ArrayList 提供了一个默认的容量10，那么有没有想过一个问题，如果我的集合大小超过了10，ArrayList会怎么处理呢？我们好像从来没有主动为ArrayList扩大容量，ArrayList好像自动帮我们做了扩容处理。确实是这样的，接下来我要介绍下的就是 ArrayList 自动扩容机制。依然是通过自动扩容的代码来介绍，代码相对比较简单。1234567891011121314151617181920212223242526272829303132333435363738394041424344454647 //开始自动扩容 //例如添加元素时，会先确保ArrayList能容乃所有元素，会将（size+addsize） 作为 minCapacity 传入private void ensureCapacityInternal(int minCapacity) &#123; ensureExplicitCapacity(calculateCapacity(elementData, minCapacity)); &#125; //计算容量(最小为10) private static int calculateCapacity(Object[] elementData, int minCapacity) &#123; if (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) &#123; return Math.max(DEFAULT_CAPACITY, minCapacity); &#125; return minCapacity; &#125; //确保集合 能达到指定大小的存储能力（最低是10） private void ensureExplicitCapacity(int minCapacity) &#123; //遍历的时候，不能扩容，即不能往集合中添加元素 modCount++; // overflow-conscious code if (minCapacity - elementData.length &gt; 0) grow(minCapacity); &#125;// 自动扩容核心--具体实现 private void grow(int minCapacity) &#123; // overflow-conscious code int oldCapacity = elementData.length; //扩容一次 1.5倍 int newCapacity = oldCapacity + (oldCapacity &gt;&gt; 1); // 如果还是小于 minCapacity，直接改为传进来的值 if (newCapacity - minCapacity &lt; 0) newCapacity = minCapacity; // 如果大于最大的 MAX_ARRAY_SIZE ，构建一个大容量 if (newCapacity - MAX_ARRAY_SIZE &gt; 0) newCapacity = hugeCapacity(minCapacity); // minCapacity is usually close to size, so this is a win: elementData = Arrays.copyOf(elementData, newCapacity); &#125; //返回一个超大容量 （ 在size 等于 Integer，MAX_VALUE抛出 java.lang.OutOfMemoryError: Requested array size exceeds VM limit） private static int hugeCapacity(int minCapacity) &#123; if (minCapacity &lt; 0) // overflow throw new OutOfMemoryError(); return (minCapacity &gt; MAX_ARRAY_SIZE) ? Integer.MAX_VALUE : MAX_ARRAY_SIZE; &#125;通过阅读 grow（）方法，总结一下，自动扩容的逻辑是：如果当前需要存储的 minCapacity 大于element.length, 那么就扩大1.5倍，如果还是不够存，那么直接将 newCapacity 容量设置为 minCapacity。如果 newCapacity 大于 MAX_ARRAY_SIZE ，返回一个超大容量，当然最大不能超过 Integer.MAX_VALUE。最后，ArrayList 还提供了一个手动扩容的 public 方法。12345678910111213// 确保 指定大小的存储能力的集合 -- 最小大小10, public void ensureCapacity(int minCapacity) &#123; int minExpand = (elementData != DEFAULTCAPACITY_EMPTY_ELEMENTDATA) // any size if not default element table ? 0 // larger than default for default empty table. It's already // supposed to be at default size. : DEFAULT_CAPACITY; if (minCapacity &gt; minExpand) &#123; ensureExplicitCapacity(minCapacity); &#125; &#125;好的，今天的分享就到此为止。就是这么突然，是不是有点意犹未尽的赶脚。。。不用着急，接下来几天，会进行ArrayList的后续解读。","categories":[{"name":"明明白白系列","slug":"明明白白系列","permalink":"https://zjcool.github.io/categories/明明白白系列/"}],"tags":[{"name":"jdk源码","slug":"jdk源码","permalink":"https://zjcool.github.io/tags/jdk源码/"},{"name":"数据结构","slug":"数据结构","permalink":"https://zjcool.github.io/tags/数据结构/"}],"author":"zhangj"},{"title":"【springboot源码解析】-- 启动过程","slug":"【springboot源码解析】-SpringApplication","date":"2019-11-19T08:05:00.000Z","updated":"2019-12-27T06:26:30.819Z","comments":true,"path":"2019/11/19/【springboot源码解析】-SpringApplication/","link":"","permalink":"https://zjcool.github.io/2019/11/19/【springboot源码解析】-SpringApplication/","excerpt":"概述从工作开始接触 springboot 到现在将近过去两年时光了，虽偶然看看springboot启动源码，但从未仔细研读深究过，网上虽然有很多源码解析，但是每次读几篇就会因为各种原因半途而止，这次准备花一点时间好好将底层源码研究一番。好了，我们正式开始 springboot 之旅吧!请看下面代码吧：12345678@SpringBootApplicationpublic class Application &#123; public static void main(String[] args) &#123; SpringApplication.run(Application.class, args); &#125;&#125;","text":"概述从工作开始接触 springboot 到现在将近过去两年时光了，虽偶然看看springboot启动源码，但从未仔细研读深究过，网上虽然有很多源码解析，但是每次读几篇就会因为各种原因半途而止，这次准备花一点时间好好将底层源码研究一番。好了，我们正式开始 springboot 之旅吧!请看下面代码吧：12345678@SpringBootApplicationpublic class Application &#123; public static void main(String[] args) &#123; SpringApplication.run(Application.class, args); &#125;&#125;想必大家对上面的代码都不会陌生，任何一个 springboot 服务都是由此方法开始启动的，开始一个个来解释。@SpringBootApplication 注解官方给出的解释是This is a convenience annotation that is equivalent to declaring {@code @Configuration}, {@code @EnableAutoConfiguration} and {@code @ComponentScan}.也就是说 @SpringBootApplication 是 @Configuration、@EnableAutoConfiguration、@ComponentScan 三个注解的组合注解。想详细了解这三个注解的含义，可以阅读以下文章：深入理解 – @Configuration 注解深入理解 – @EnableAutoConfiguration 注解深入理解 – @ComponentScan 注解主函数主函数依次执行step 1：1SpringApplication.run(Application.class, args);step 2：1234public static ConfigurableApplicationContext run(Class&lt;?&gt;[] primarySources, String[] args) &#123; return new SpringApplication(primarySources).run(args); &#125;primarySources 就是 Application.classstep 3：开始执行的 SpringApplication 的构造方法1234567891011121314public SpringApplication(ResourceLoader resourceLoader, Class&lt;?&gt;... primarySources) &#123; this.resourceLoader = resourceLoader; Assert.notNull(primarySources, \"PrimarySources must not be null\"); this.primarySources = new LinkedHashSet&lt;&gt;(Arrays.asList(primarySources)); //&lt;1&gt; 从classPath中推测当前应用是什么类型的应用， this.webApplicationType = WebApplicationType.deduceFromClasspath(); //&lt;2&gt; 设置 spring 容器的初始化器（ApplicationContextInitializer） setInitializers((Collection) getSpringFactoriesInstances( ApplicationContextInitializer.class)); // &lt;3&gt;设置 spring 容器的监听器 setListeners((Collection) getSpringFactoriesInstances(ApplicationListener.class)); // 设置主类，即 Application.class this.mainApplicationClass = deduceMainApplicationClass(); &#125;&lt;1&gt; WebApplicationType类型包括 SERVLET、REACTIVE、NONE，后面会根据不同的类型，以不同的方式来启动服务&lt;2&gt;会从 spring-boot 和 spring-boot-autoconfigure 的jar包里的META-INF/spring.factories 中加载所有的 ApplicationContextInitializer 作为 spring 容器的初始化器 ApplicationContextInitializer&lt;3&gt; 会从 spring-boot 和spring-boot-autoconfigure 的jar包里的META-INF/spring.factories 中加载所有的 Listenerstep 4： 开始运行Spring 应用，刷新上下文这一步内容有点多，请耐心查看12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970//SpringApptionlication.java// springboot 启动过程public ConfigurableApplicationContext run(String... args) &#123; // stopWatch 是一个计算代码时间的类 StopWatch stopWatch = new StopWatch(); stopWatch.start(); ConfigurableApplicationContext context = null; //异常收集容器 Collection&lt;SpringBootExceptionReporter&gt; exceptionReporters = new ArrayList&lt;&gt;(); // 开启无设备鼠标键盘模式（需要提供一些（设备）信息给客户端） configureHeadlessProperty(); // 反射生成 SpringApplicationRunListener 的实现类----&gt; EventPublishingRunListener 即获取Spring启动监听器 SpringApplicationRunListeners listeners = getRunListeners(args); // 触发 ApplicationStartingEvent 事件，执行对应动作 listeners.starting(); try &#123; // 获取环境配置 ApplicationArguments applicationArguments = new DefaultApplicationArguments( args); // &lt;1&gt;生成环境配置+设置环境变量 ConfigurableEnvironment environment = prepareEnvironment(listeners, applicationArguments); // 忽略的配置的 bean configureIgnoreBeanInfo(environment); //输出banner Banner printedBanner = printBanner(environment); //生成应用上下文（这里会生成基于注解的 AnnotationConfigServletWebServerApplicationContext） context = createApplicationContext(); // 反射生产一些异常收集器 exceptionReporters = getSpringFactoriesInstances( SpringBootExceptionReporter.class, new Class[] &#123; ConfigurableApplicationContext.class &#125;, context); //准备上下文，会触发准备上下文事件 prepareContext(context, environment, listeners, applicationArguments, printedBanner); //刷新上下文 refreshContext(context); afterRefresh(context, applicationArguments); stopWatch.stop(); if (this.logStartupInfo) &#123; new StartupInfoLogger(this.mainApplicationClass) .logStarted(getApplicationLog(), stopWatch); &#125; listeners.started(context); callRunners(context, applicationArguments); &#125; catch (Throwable ex) &#123; handleRunFailure(context, ex, exceptionReporters, listeners); throw new IllegalStateException(ex); &#125; try &#123; listeners.running(context); &#125; catch (Throwable ex) &#123; handleRunFailure(context, ex, exceptionReporters, null); throw new IllegalStateException(ex); &#125; return context; &#125;&lt;1&gt;详细解读待续。。。。","categories":[],"tags":[{"name":"springboot","slug":"springboot","permalink":"https://zjcool.github.io/tags/springboot/"}],"author":"zhangj"},{"title":"【redis命令介绍】-  client list","slug":"【redis命令介绍】-client","date":"2019-10-22T12:21:00.000Z","updated":"2019-10-22T12:37:08.257Z","comments":true,"path":"2019/10/22/【redis命令介绍】-client/","link":"","permalink":"https://zjcool.github.io/2019/10/22/【redis命令介绍】-client/","excerpt":"","text":"client list : 返回所有连接到服务器的客户端信息和统计数据返回值的含义： * id: 唯一的64位的客户端ID(Redis 2.8.12加入)。 * addr: 客户端的地址和端口 * fd: 套接字所使用的文件描述符 * age: 以秒计算的已连接时长 * idle: 以秒计算的空闲时长 * flags: 客户端 flag * db: 该客户端正在使用的数据库 ID * sub: 已订阅频道的数量 * psub: 已订阅模式的数量 * multi: 在事务中被执行的命令数量 * qbuf: 查询缓冲区的长度（字节为单位， 0 表示没有分配查询缓冲区） * qbuf-free: 查询缓冲区剩余空间的长度（字节为单位， 0 表示没有剩余空间） * obl: 输出缓冲区的长度（字节为单位， 0 表示没有分配输出缓冲区） * oll: 输出列表包含的对象数量（当输出缓冲区没有剩余空间时，命令回复会以字符串对象的形式被入队到这个队列里） * omem: 输出缓冲区和输出列表占用的内存总量 * events: 文件描述符事件 * cmd: 最近一次执行的命令","categories":[{"name":"redis","slug":"redis","permalink":"https://zjcool.github.io/categories/redis/"}],"tags":[{"name":"redis","slug":"redis","permalink":"https://zjcool.github.io/tags/redis/"}],"author":"zhangj"},{"title":"缓存问题及优化方案总结","slug":"redis缓存","date":"2019-10-22T10:05:00.000Z","updated":"2019-12-27T06:26:47.186Z","comments":true,"path":"2019/10/22/redis缓存/","link":"","permalink":"https://zjcool.github.io/2019/10/22/redis缓存/","excerpt":"缓存优化1. 缓存穿透现象解释：大量出现查询一个根本不存在的数据，缓存层和存储层都不会命中。从而导致后端负载加大，甚至服务宕机。1.1 穿透优化方案缓存空对象+设置过期时间缓存层之前加一个布隆过滤器（判断一定不存在，就不到缓存层去找了）适用场景：数据命中不高、数据相对稳定、实时性低（通常数据集较大）的应用场景。1.2 对比方案适用场景维护成本缓存空对象数据命中不高、数据频繁变化代码维护简单、需要更多缓存空间、数据源不一致布隆过滤器数据命中不高、数据相对固定、实时性低代码维护复杂、缓存空间占用少","text":"缓存优化1. 缓存穿透现象解释：大量出现查询一个根本不存在的数据，缓存层和存储层都不会命中。从而导致后端负载加大，甚至服务宕机。1.1 穿透优化方案缓存空对象+设置过期时间缓存层之前加一个布隆过滤器（判断一定不存在，就不到缓存层去找了）适用场景：数据命中不高、数据相对稳定、实时性低（通常数据集较大）的应用场景。1.2 对比方案适用场景维护成本缓存空对象数据命中不高、数据频繁变化代码维护简单、需要更多缓存空间、数据源不一致布隆过滤器数据命中不高、数据相对固定、实时性低代码维护复杂、缓存空间占用少2. 无底洞现象解释：水平增加节点，性能不升，反而可能出现下降的情况。可能原因分析：一次批量操作会涉及多次网络操作，随着节点增加，耗时增大网络连接数变多，对节点性能存在一定的影响2.1 无底洞优化思路命令本身的优化，例如优化SQL减少通信次数降低接入成本，例如客户端使用长连接/连接池,NIO等2.2 方案串型io–单线程批量获取问题：node 多，速度慢并行io–多线程批量获取问题：编程复杂，出问题，定位困难hash_tag–让key集中在一台机器上问题：业务维护成本高，可能导致数据倾斜3. 缓存雪崩现象解释：缓存层存在故障，导致所有请求直接请求数据存储层，从而导致存储层调用暴增，造成存储层也会级联宕机。3.1 优化思路（预防和解决）保证缓存层高可用后端提供限流并降级实现提前演练（预防+测试）4.热点key重建现象解释：当前key是一个热点key，并发量非常大；同时，重建缓存不能在短时间内完成。因此，在缓存失效的瞬间，会有大量的线程开始重建缓存，导致后端负载过大。4.1 优化思路减少重建缓存次数数据尽可能一致较少的潜在风险4.2 优化方案互斥锁只允许一个线程重建缓存 —&gt; redis 中setnx命令永远不过期设置一个逻辑过期时间，和value一起存储，当发现key逻辑过期时间小于当前时间时，异步更新key（通过setnx 分布式锁，获取锁，就去异步更新），会出现数据不一致现象参考资料《Redis 开发与运维》","categories":[{"name":"缓存","slug":"缓存","permalink":"https://zjcool.github.io/categories/缓存/"}],"tags":[],"author":"zhangj"},{"title":"【JVM】- 调整Jvm参数SurvivorRatio思路","slug":"【java】-调整jvm思路","date":"2019-10-12T03:17:39.000Z","updated":"2019-12-27T06:27:00.404Z","comments":true,"path":"2019/10/12/【java】-调整jvm思路/","link":"","permalink":"https://zjcool.github.io/2019/10/12/【java】-调整jvm思路/","excerpt":"关于Jvm的内存模型，网上资料很多，这里就不详细介绍了。今天我首先想要分享的是如何调整eden区和Survivor区的比例，即：-XX:SurvivorRatio。（默认是8，即eden：from：to=8：1：1）我们知道Jvm堆内存大小=年轻代+老年代，而年轻代=Eden+2*Survivor,那么如何设置他们的比例关系比较合理呢？","text":"关于Jvm的内存模型，网上资料很多，这里就不详细介绍了。今天我首先想要分享的是如何调整eden区和Survivor区的比例，即：-XX:SurvivorRatio。（默认是8，即eden：from：to=8：1：1）我们知道Jvm堆内存大小=年轻代+老年代，而年轻代=Eden+2*Survivor,那么如何设置他们的比例关系比较合理呢？我认为的核心思路：尽可能去减少gc次数。尤其full gc 次数我们知道eden区满的时候，会触发young gc，会对eden区和一块 Survivor-From区的内存进行GC，把gc后的存活的内容（超过一定年龄的升入老年代）放入另一块 Survivor-To 区中。如果To区不够，就直接放入老年代。所以为了减少gc次数（young和full gc），应该让每次young gc的后存活的内容最大限度的放入To区，即最大限度的利用内存空间。那么如何观察呢？我们可以使用命令：jstat -gcutil pid 5000 (5秒打印一次jvm信息（比例）) 观察 每次young gc后的 Survivor 区比例占用情况，如果 Survivor 的区每次都只有20-30%的占用比，那么可以适当的减小 Survivor 的大小 即调大 SurvivorRatio 。","categories":[],"tags":[],"author":"zhangj"},{"title":"【java】- 定位cpu过高问题代码","slug":"【java】-性能调优步骤","date":"2019-10-12T02:48:00.000Z","updated":"2019-10-12T03:15:33.015Z","comments":true,"path":"2019/10/12/【java】-性能调优步骤/","link":"","permalink":"https://zjcool.github.io/2019/10/12/【java】-性能调优步骤/","excerpt":"","text":"相信大家肯定遇到过java程序cpu一直居高不下的情况，那么我来简单介绍在linux系统下如何定位java进程cpu过高的代码位置。首先，使用命令top,找到cpu过高的pid；接着，使用top -Hp pid 找到对应的线程 tid；我们知道jstack可以查看当前java进程的堆栈状态；由于线程在堆栈信息的使用16进制的。那么，printf &quot;%x&quot; tid 可以获取16进制的 tid16。最后使用 jstack pid |grep -A 10 tid16 ，根据情况调整行数后，就可以看到该线程是执行的代码。","categories":[{"name":"java","slug":"java","permalink":"https://zjcool.github.io/categories/java/"}],"tags":[],"author":"zhangj"},{"title":"【K8s】- 揭秘K8s健康检查机制 LivenessProbe和ReadinessProbe","slug":"【K8s】-健康检查机制","date":"2019-10-10T07:35:00.000Z","updated":"2019-12-27T06:27:10.032Z","comments":true,"path":"2019/10/10/【K8s】-健康检查机制/","link":"","permalink":"https://zjcool.github.io/2019/10/10/【K8s】-健康检查机制/","excerpt":"从接触k8s，到目前已经差不多一年时间了，但是对k8s的健康检查机制一直很模糊，今天对其进行了简单的研究，记录如下：概述k8s的健康机制主要是通过两个探测机制：LivenessProbe和ReadinessProbe。LivenessProbe:用于判断容器是否存活（running状态），来确定是否需要重启容器。ReadinessProbe:用于判断容器是否启动完成（ready状态）,来确定是否可以接受流量（请求）。","text":"从接触k8s，到目前已经差不多一年时间了，但是对k8s的健康检查机制一直很模糊，今天对其进行了简单的研究，记录如下：概述k8s的健康机制主要是通过两个探测机制：LivenessProbe和ReadinessProbe。LivenessProbe:用于判断容器是否存活（running状态），来确定是否需要重启容器。ReadinessProbe:用于判断容器是否启动完成（ready状态）,来确定是否可以接受流量（请求）。探测方式k8s是通过探测的方式来判断pod是否正常的，那么k8s支持的探测方式有哪些呢？其主要是以下三种：HTTP GET探针 对容器内的目标ip和端口发送HTTP GET请求。响应状态码是2xx或3xx 表示成功。TCP 套接字探针 尝试建立TCP连接，成功建立则成功。Exec探针，在容器内执行shell命令，根据返回结果判断是否成功。","categories":[{"name":"K8s","slug":"K8s","permalink":"https://zjcool.github.io/categories/K8s/"}],"tags":[],"author":"zhangj"},{"title":"【java】- 排查问题命令","slug":"【java排查命令】","date":"2019-10-08T08:50:00.000Z","updated":"2019-12-27T06:29:50.324Z","comments":true,"path":"2019/10/08/【java排查命令】/","link":"","permalink":"https://zjcool.github.io/2019/10/08/【java排查命令】/","excerpt":"","text":"获取java程序的pid1jps -v查看占用cpu最高线程1top -Hp pid查看某个线程的堆栈信息123//获取 线程id的十六进制printf &quot;%x\\n&quot; 线程id jstack pid |grep &lt;16进制&gt;查看堆内存使用情况1jmap -heap pid查看堆内存中的对象数目，大小1jmap -histo:live pid统计jvm信息-查看gc信息（1000毫秒 4次）1jstat -gc pid 1000 4统计jvm信息-查看gc信息比例（1000毫秒 4次）1jstat -gcutil pid 1000 4dump heap 命令1jmap -dump:live,format=b,file=heapLive.hprof pid","categories":[{"name":"Java","slug":"Java","permalink":"https://zjcool.github.io/categories/Java/"}],"tags":[],"author":"zhangj"},{"title":"【排序算法】-  冒泡排序","slug":"【排序算法】-冒泡排序","date":"2019-09-26T15:11:45.000Z","updated":"2019-10-08T08:49:07.128Z","comments":true,"path":"2019/09/26/【排序算法】-冒泡排序/","link":"","permalink":"https://zjcool.github.io/2019/09/26/【排序算法】-冒泡排序/","excerpt":"","text":"是一个稳定的排序算法最优时间复杂度O(n)，完全有序；最差时间复杂度O(n^2)-逆序123456789101112131415161718// 冒泡排序，a 表示数组，n 表示数组大小public void bubbleSort(int[] a, int n) &#123; if (n &lt;= 1) return; for (int i = 0; i &lt; n; ++i) &#123; // 提前退出冒泡循环的标志位 boolean flag = false; for (int j = 0; j &lt; n - i - 1; ++j) &#123; if (a[j] &gt; a[j+1]) &#123; // 交换 int tmp = a[j]; a[j] = a[j+1]; a[j+1] = tmp; flag = true; // 表示有数据交换 &#125; &#125; if (!flag) break; // 没有数据交换，提前退出 &#125;&#125;","categories":[],"tags":[],"author":"zhangj"},{"title":"【mac操作】-  制作系统盘以及恢复","slug":"【mac操作】-制作系统盘以及恢复","date":"2019-09-25T07:55:00.000Z","updated":"2019-09-25T08:18:08.976Z","comments":true,"path":"2019/09/25/【mac操作】-制作系统盘以及恢复/","link":"","permalink":"https://zjcool.github.io/2019/09/25/【mac操作】-制作系统盘以及恢复/","excerpt":"","text":"一、制作系统操作盘下载操作系统镜像iso查看u盘 diskutil list , /dev/disk2是u盘12345678910111213141516171819~ » diskutil list /dev/disk0 (internal): #: TYPE NAME SIZE IDENTIFIER 0: GUID_partition_scheme 251.0 GB disk0 1: EFI EFI 314.6 MB disk0s1 2: Apple_APFS Container disk1 250.7 GB disk0s2/dev/disk1 (synthesized): #: TYPE NAME SIZE IDENTIFIER 0: APFS Container Scheme - +250.7 GB disk1 Physical Store disk0s2 1: APFS Volume Macintosh HD 125.8 GB disk1s1 2: APFS Volume Preboot 44.4 MB disk1s2 3: APFS Volume Recovery 509.7 MB disk1s3 4: APFS Volume VM 9.7 GB disk1s4/dev/disk2 (external, physical): #: TYPE NAME SIZE IDENTIFIER 0: GUID_partition_scheme *15.9 GB disk2 1: EFI EFI 209.7 MB disk2s1 2: Microsoft Basic Data StarkyDisk 15.7 GB disk2s2解除u盘的挂载状态diskutil unmountDisk /dev/disk2写入u盘sudo dd if=iso镜像路径 of=/dev/rdisk2 bs=1m rdisk二、恢复u盘diskutil eraseDisk ExFAT myDisk /dev/disk2","categories":[{"name":"操作系统","slug":"操作系统","permalink":"https://zjcool.github.io/categories/操作系统/"}],"tags":[{"name":"mac","slug":"mac","permalink":"https://zjcool.github.io/tags/mac/"}],"author":"zhangj"},{"title":"【线上问题】-  记一次线上问题的解决方案","slug":"记一次线上问题解决方案","date":"2019-09-25T06:38:00.000Z","updated":"2019-09-25T08:26:11.367Z","comments":true,"path":"2019/09/25/记一次线上问题解决方案/","link":"","permalink":"https://zjcool.github.io/2019/09/25/记一次线上问题解决方案/","excerpt":"","text":"未解决之前存在问题老的java服务，源代码已经找不到了客户需要的接口返回参数里 加了密，加密方式为AES由于该秘钥在其他很多服务中都使用着，不能直接提供给客户使用新的服务，还没有经过测试，无法直接上线，就算能获得测试资源，上线的时间也不能满足客户的需求最终解决方案增加一个代理服务，去调用老的服务，把返回参数解密后返回给客户优点：客户只需要换一下调用的服务端口即可上线非常快（半个小时开发时间）无需关心老的接口","categories":[{"name":"线上问题","slug":"线上问题","permalink":"https://zjcool.github.io/categories/线上问题/"}],"tags":[],"author":"zhangj"},{"title":"【Java】-  获取当天剩余秒数","slug":"java—获取当天剩余秒数","date":"2019-09-23T15:11:00.000Z","updated":"2019-10-23T09:22:47.949Z","comments":true,"path":"2019/09/23/java—获取当天剩余秒数/","link":"","permalink":"https://zjcool.github.io/2019/09/23/java—获取当天剩余秒数/","excerpt":"","text":"获取当天剩余秒数两种方法1.线程不安全12345678910public static Integer getLeftTime() &#123; Calendar midnight=Calendar.getInstance(); midnight.setTime(new Date()); midnight.add(Calendar.DAY_OF_MONTH,1);//加一天 midnight.set(Calendar.HOUR_OF_DAY,0); midnight.set(Calendar.MINUTE,0); midnight.set(Calendar.SECOND,0); midnight.set(Calendar.MILLISECOND,0); return (int)((midnight.getTime().getTime()-currentDate.getTime())/1000); &#125;2.线程安全123456789 Date now = new Date(); LocalDateTime midnight = LocalDateTime.ofInstant(now.toInstant(), ZoneId.systemDefault()).plusDays(1) .withHour(0) .withMinute(0) .withSecond(0) .withNano(0); LocalDateTime current = LocalDateTime.ofInstant(now.toInstant(), ZoneId.systemDefault()); return (int) ChronoUnit.SECONDS.between(current, midnight);&#125;","categories":[{"name":"Java","slug":"Java","permalink":"https://zjcool.github.io/categories/Java/"}],"tags":[{"name":"Date","slug":"Date","permalink":"https://zjcool.github.io/tags/Date/"}],"author":"zhangj"},{"title":"【Java8】-  Predicate用法","slug":"Java8—Predicate用法","date":"2019-09-19T14:58:00.000Z","updated":"2019-09-25T08:27:14.217Z","comments":true,"path":"2019/09/19/Java8—Predicate用法/","link":"","permalink":"https://zjcool.github.io/2019/09/19/Java8—Predicate用法/","excerpt":"","text":"每次失眠，都要庆幸多了一次，可以深刻思考的机会！废话说完,直接上代码：筛选以字母c结尾的字符串1Predicate&lt;String&gt; condition2 = s -&gt; s.endsWith(&quot;c&quot;);筛选以字母a开头的字符串12345Predicate&lt;String&gt; condition1 = s -&gt; s.startsWith(&quot;a&quot;);boolean res1 = condition1.test(&quot;abc&quot;); //true//negate 取反的意思boolean res2 = condition1.negate().test(&quot;abc&quot;) //false筛选以字母a开头 且 以字母c结尾的字符串1Predicate&lt;String&gt; and = condition.and(condition2);筛选以字母a开头 或 以字母c结尾的字符串1Predicate&lt;String&gt; and = condition.or(condition2);筛选大于3的数字1Predicate&lt;Integer&gt; condition2 = a -&gt; a &gt;=3;遍历集合删除以a开头的字符串1List&lt;String&gt; res4 = list.stream().filter(condition1.negate()).collect(Collectors.toList(););","categories":[{"name":"Java","slug":"Java","permalink":"https://zjcool.github.io/categories/Java/"}],"tags":[{"name":"Predicate","slug":"Predicate","permalink":"https://zjcool.github.io/tags/Predicate/"}],"author":"zhangj"},{"title":"【Lamada】-  遍历过滤","slug":"Lamada—遍历过滤","date":"2019-09-19T13:31:00.000Z","updated":"2019-09-25T08:09:20.512Z","comments":true,"path":"2019/09/19/Lamada—遍历过滤/","link":"","permalink":"https://zjcool.github.io/2019/09/19/Lamada—遍历过滤/","excerpt":"","text":"java8以前，想对list集合进行过滤12345678910111213141516171819202122//不要用Arrays.asList,迭代器删除会失败List&lt;String&gt; list = new ArrayList&lt;&gt;(3);list.add(&quot;abc&quot;);list.add(&quot;bbc&quot;);list.add(&quot;cbc&quot;);//过滤以字母 a 开头的字符串List&lt;String&gt; res = new ArrayList&lt;&gt;();for (String s : list) &#123; if (!s.startsWith(&quot;a&quot;)) &#123; res.add(s); &#125;&#125;//或者这样Iterator&lt;String&gt; it = list.iterator();while (it.hasNext()) &#123; String next = it.next(); if (next.startsWith(&quot;a&quot;)) &#123; it.remove(); &#125;&#125;java8使用lamada实现如下：1List&lt;String&gt; res = list.stream().filter(s -&gt; !s.startsWith(&quot;a&quot;)).collect(Collectors.toList());","categories":[{"name":"Java","slug":"Java","permalink":"https://zjcool.github.io/categories/Java/"}],"tags":[{"name":"Lamada","slug":"Lamada","permalink":"https://zjcool.github.io/tags/Lamada/"}],"author":"zhangj"},{"title":"【Lamada】-  实现runnable","slug":"Lamada—实现runnable","date":"2019-09-19T13:05:00.000Z","updated":"2019-09-25T08:09:32.504Z","comments":true,"path":"2019/09/19/Lamada—实现runnable/","link":"","permalink":"https://zjcool.github.io/2019/09/19/Lamada—实现runnable/","excerpt":"","text":"在 Java8 之前开一个新的线程执行任务,具体代码实现如下：1234567//java8 之前new Thread(new Runnable() &#123; @Override public void run() &#123; System.out.println(&quot;开一个新的线程，执行任务了&quot;); &#125; &#125;).start();而java8 提供了lamada表达式，我们可以这样实现：1new Thread(() -&gt; System.out.println(&quot;开一个新的线程，执行任务了&quot;)).start();怎么样，这样的匿名内部实现是不是非常的简单呢！补充：Calculate 是一个接口，里面有一个接口方法cal。如果你想实现该接口，但又不想建一个新的类，可以写成如下这样：12Calculate calculate = (int a, int b) -&gt; a + b;calculate.cal(1,2);","categories":[{"name":"Java","slug":"Java","permalink":"https://zjcool.github.io/categories/Java/"}],"tags":[{"name":"Lamada","slug":"Lamada","permalink":"https://zjcool.github.io/tags/Lamada/"}],"author":"zhangj"},{"title":"【k8s】-  常用命令","slug":"K8S-常用命令","date":"2019-09-17T14:22:00.000Z","updated":"2019-10-10T08:40:21.642Z","comments":true,"path":"2019/09/17/K8S-常用命令/","link":"","permalink":"https://zjcool.github.io/2019/09/17/K8S-常用命令/","excerpt":"","text":"一、POD级别的操作获取kube-system命名空间下的所有pod(详细)1kubectl get po -nkube-system（-o wide）获取kube-system命名空间下名为app1的pod的信息1kubectl describe po app1 -nkube-system删除kube-system命名空间下名为app1的pod1kubectl delete po app1 -nkube-system获取kube-system命名空间下名为app1的pod的日志信息1kubectl logs app1 -nkube-system二、Deploy级别的操作获取kube-system命名空间下的所有deploy(详细)1kubectl get deploy -n kube-system（-o wide）编辑kube-system命名空间下的名为deployA 的deploy1kubectl edit deploy deployA -n kube-system更新kube-system命名空间下名为deployA里容器app1的镜像1kubectl set image deploy deployA app1=nginx:1.9.1修改kube-system命名空间下名为deployA里容器app1的资源限制1kubectl set resources deploy deployA -c=app1 --limits=cpu=200m,memory=512Mi修改kube-system命名空间下名为deployA所有容器的资源限制1kubectl set resources deploy deployA· --limits=cpu=200m,memory=512Mi","categories":[{"name":"K8s","slug":"K8s","permalink":"https://zjcool.github.io/categories/K8s/"}],"tags":[{"name":"k8s","slug":"k8s","permalink":"https://zjcool.github.io/tags/k8s/"},{"name":"kubernetes","slug":"kubernetes","permalink":"https://zjcool.github.io/tags/kubernetes/"}],"author":"zhangj"},{"title":"【Lamada】-  List转Map","slug":"Lamada-List-Map","date":"2019-09-17T12:29:00.000Z","updated":"2019-12-27T06:27:50.003Z","comments":true,"path":"2019/09/17/Lamada-List-Map/","link":"","permalink":"https://zjcool.github.io/2019/09/17/Lamada-List-Map/","excerpt":"","text":"List to Map 一般可以分为以下几种情况:分组去重User.java1234567891011121314151617181920212223242526272829303132333435363738394041import lombok.AllArgsConstructor;import lombok.Data;import java.util.ArrayList;import java.util.List;import java.util.Map;import java.util.function.Function;import java.util.stream.Collectors;@Data@AllArgsConstructorpublic class User &#123; private String name; private Integer age; private Integer grade; private String sex; public static void main(String[] args) &#123; List&lt;User&gt; users =new ArrayList&lt;&gt;(); users.add(new User(\"zhangsan\",18,90,\"男\")); users.add(new User(\"zhangsan\",19,90,\"男\")); users.add(new User(\"lisi\",19,91,\"女\")); //list to map //1.分组，按照姓名分组 Map&lt;String, List&lt;User&gt;&gt; listMap = users.stream().collect( Collectors.groupingBy(User::getName)); //2.分组统计 男女 Map&lt;String, Long&gt; collect = users.stream().collect( Collectors.groupingBy(User::getSex, Collectors.counting()) ); //3.去重，根据年纪，后面的替换前面的，不加会跑出异常 Map&lt;Integer, User&gt; userMap = users.stream().collect( Collectors.toMap( User::getAge, Function.identity(), (oldUser, newUser) -&gt; newUser)); &#125;&#125;","categories":[{"name":"Java","slug":"Java","permalink":"https://zjcool.github.io/categories/Java/"}],"tags":[{"name":"Lamada","slug":"Lamada","permalink":"https://zjcool.github.io/tags/Lamada/"}],"author":"zhangj"}]}